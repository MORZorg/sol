#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass book
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Appendix
\end_layout

\begin_layout Standard
Here we will report some examples, both 
\emph on
.sol
\emph default
 and 
\emph on
.ohana
\emph default
 code, created while implementing the whole project.
\end_layout

\begin_layout Section
Hello World
\end_layout

\begin_layout Standard
The 
\emph on
.sol
\emph default
 code could be seen in the tutorial part (Code 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ref{lst:hello_world}
\end_layout

\end_inset

), instead here we report its S-Code (Code ).
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[caption={sbra}]
\end_layout

\begin_layout Plain Layout

SCODE 9
\end_layout

\begin_layout Plain Layout

PUSH 0 0 -1
\end_layout

\begin_layout Plain Layout

GOTO 4
\end_layout

\begin_layout Plain Layout

POP
\end_layout

\begin_layout Plain Layout

HALT
\end_layout

\begin_layout Plain Layout

FUNC 1
\end_layout

\begin_layout Plain Layout

LDS "Hello world!"
\end_layout

\begin_layout Plain Layout

WRITE "s"
\end_layout

\begin_layout Plain Layout

LDI 0
\end_layout

\begin_layout Plain Layout

RETURN 
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Permutations
\end_layout

\begin_layout Standard
This example calculates the permutations of a given set of characters, which
 are inserted by the user, in both recursive and iterative modes.
\end_layout

\begin_layout Standard
SOL code 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ref{lst:perm_sol}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[caption={SOL code of Permutations},label={lst:perm_sol}
\end_layout

\begin_layout Plain Layout

func main() : int
\end_layout

\begin_layout Plain Layout

	type 
\end_layout

\begin_layout Plain Layout

		pseudo_string: vector[ 15 ] of char;
\end_layout

\begin_layout Plain Layout

		permutation: struct( str: pseudo_string; perm: int; );
\end_layout

\begin_layout Plain Layout

	var
\end_layout

\begin_layout Plain Layout

		i: int;
\end_layout

\begin_layout Plain Layout

		p: permutation;
\end_layout

\begin_layout Plain Layout

		word: pseudo_string;
\end_layout

\begin_layout Plain Layout

	const
\end_layout

\begin_layout Plain Layout

		MAX_LEN: int = 15;
\end_layout

\begin_layout Plain Layout

		INTRO: string = "Insert a word:";
\end_layout

\begin_layout Plain Layout

	func new_pseudo_string() : pseudo_string
\end_layout

\begin_layout Plain Layout

		var
\end_layout

\begin_layout Plain Layout

			result: pseudo_string;
\end_layout

\begin_layout Plain Layout

			i: int;
\end_layout

\begin_layout Plain Layout

	begin new_pseudo_string
\end_layout

\begin_layout Plain Layout

		for i = 0 to MAX_LEN - 1 do
\end_layout

\begin_layout Plain Layout

			result[ i ] = '
\backslash
0';
\end_layout

\begin_layout Plain Layout

		endfor;
\end_layout

\begin_layout Plain Layout

		return result;
\end_layout

\begin_layout Plain Layout

	end new_pseudo_string
\end_layout

\begin_layout Plain Layout

	func strlen( s: pseudo_string; ) : int
\end_layout

\begin_layout Plain Layout

		var i: int;
\end_layout

\begin_layout Plain Layout

	begin strlen
\end_layout

\begin_layout Plain Layout

		for i = 0 to MAX_LEN - 1 do
\end_layout

\begin_layout Plain Layout

			if s[ i ] == '
\backslash
0' then
\end_layout

\begin_layout Plain Layout

				break;
\end_layout

\begin_layout Plain Layout

			endif;
\end_layout

\begin_layout Plain Layout

		endfor;
\end_layout

\begin_layout Plain Layout

		return i;
\end_layout

\begin_layout Plain Layout

	end strlen
\end_layout

\begin_layout Plain Layout

	func strcat( s1, s2: pseudo_string; ) : pseudo_string 
\end_layout

\begin_layout Plain Layout

		var
\end_layout

\begin_layout Plain Layout

			result, s: pseudo_string;
\end_layout

\begin_layout Plain Layout

			c: char;
\end_layout

\begin_layout Plain Layout

	begin strcat
\end_layout

\begin_layout Plain Layout

		if strlen( s1 ) + strlen( s2 ) <= MAX_LEN then
\end_layout

\begin_layout Plain Layout

			foreach s in vector( s1, s2 ) do
\end_layout

\begin_layout Plain Layout

				foreach c in s do
\end_layout

\begin_layout Plain Layout

					result[ strlen( result ) ] = c;
\end_layout

\begin_layout Plain Layout

				endforeach;
\end_layout

\begin_layout Plain Layout

			endforeach;
\end_layout

\begin_layout Plain Layout

		endif;
\end_layout

\begin_layout Plain Layout

		return result;
\end_layout

\begin_layout Plain Layout

	end strcat
\end_layout

\begin_layout Plain Layout

	func strcpy( str: pseudo_string; ) : pseudo_string
\end_layout

\begin_layout Plain Layout

		var
\end_layout

\begin_layout Plain Layout

			result: pseudo_string;
\end_layout

\begin_layout Plain Layout

			i: int;
\end_layout

\begin_layout Plain Layout

	begin strcpy
\end_layout

\begin_layout Plain Layout

		for i = 0 to strlen( str ) - 1 do
\end_layout

\begin_layout Plain Layout

			result[ i ] = str[ i ];
\end_layout

\begin_layout Plain Layout

		endfor;
\end_layout

\begin_layout Plain Layout

		return result;
\end_layout

\begin_layout Plain Layout

	end strcpy
\end_layout

\begin_layout Plain Layout

	func recursive_factorial( number: int; ) : int
\end_layout

\begin_layout Plain Layout

	begin recursive_factorial
\end_layout

\begin_layout Plain Layout

		if number <= 2 then
\end_layout

\begin_layout Plain Layout

			return number;
\end_layout

\begin_layout Plain Layout

		endif;
\end_layout

\begin_layout Plain Layout

		return number * recursive_factorial( number - 1 );
\end_layout

\begin_layout Plain Layout

	end recursive_factorial
\end_layout

\begin_layout Plain Layout

	func recursive_permutation( to_process: pseudo_string;
\end_layout

\begin_layout Plain Layout

								base: pseudo_string;
\end_layout

\begin_layout Plain Layout

								number: int; ) : pseudo_string
\end_layout

\begin_layout Plain Layout

		var
\end_layout

\begin_layout Plain Layout

			next_step, current_base, result, temp: pseudo_string;
\end_layout

\begin_layout Plain Layout

			i, j: int;
\end_layout

\begin_layout Plain Layout

	begin recursive_permutation
\end_layout

\begin_layout Plain Layout

		-- Returning if i have only one char to process
\end_layout

\begin_layout Plain Layout

		if strlen( to_process ) == 1 then 
\end_layout

\begin_layout Plain Layout

			write vector( struct( "Recursive permutation:",
\end_layout

\begin_layout Plain Layout

									number + 1,
\end_layout

\begin_layout Plain Layout

									strcat( base, to_process ) ) );
\end_layout

\begin_layout Plain Layout

			return strcat( base, to_process );
\end_layout

\begin_layout Plain Layout

		endif;
\end_layout

\begin_layout Plain Layout

		j = 0;
\end_layout

\begin_layout Plain Layout

		temp = new_pseudo_string();
\end_layout

\begin_layout Plain Layout

		while j < strlen( to_process ) do
\end_layout

\begin_layout Plain Layout

			-- Resetting base to the argument value and resetting next_step
\end_layout

\begin_layout Plain Layout

			current_base = strcpy( base );
\end_layout

\begin_layout Plain Layout

			next_step = new_pseudo_string();
\end_layout

\begin_layout Plain Layout

			-- Creating the new string to pass as argument
\end_layout

\begin_layout Plain Layout

			for i = 0 to strlen( to_process ) - 1 do
\end_layout

\begin_layout Plain Layout

				temp[ 0 ] = to_process[ i ];
\end_layout

\begin_layout Plain Layout

				if i != j then
\end_layout

\begin_layout Plain Layout

					next_step = strcat( next_step, temp );
\end_layout

\begin_layout Plain Layout

				else
\end_layout

\begin_layout Plain Layout

					current_base = strcat( current_base, temp );
\end_layout

\begin_layout Plain Layout

				endif;
\end_layout

\begin_layout Plain Layout

			endfor;
\end_layout

\begin_layout Plain Layout

			-- Decrementing the size of the permutations
\end_layout

\begin_layout Plain Layout

			result = recursive_permutation( next_step, current_base, number );
\end_layout

\begin_layout Plain Layout

			number = number + recursive_factorial( strlen( next_step ) );
\end_layout

\begin_layout Plain Layout

			j = j + 1;
\end_layout

\begin_layout Plain Layout

		endwhile;
\end_layout

\begin_layout Plain Layout

		-- Completly useless
\end_layout

\begin_layout Plain Layout

		return result;
\end_layout

\begin_layout Plain Layout

	end recursive_permutation
\end_layout

\begin_layout Plain Layout

	func factorial( i: int; ) : int
\end_layout

\begin_layout Plain Layout

		var result: int;
\end_layout

\begin_layout Plain Layout

	begin factorial
\end_layout

\begin_layout Plain Layout

		result = 1;
\end_layout

\begin_layout Plain Layout

		for i = 2 to i do
\end_layout

\begin_layout Plain Layout

			result = result * i;
\end_layout

\begin_layout Plain Layout

		endfor;
\end_layout

\begin_layout Plain Layout

		return result;
\end_layout

\begin_layout Plain Layout

	end factorial
\end_layout

\begin_layout Plain Layout

	func ceil( r: real; ) : int
\end_layout

\begin_layout Plain Layout

		var result: int;
\end_layout

\begin_layout Plain Layout

	begin ceil
\end_layout

\begin_layout Plain Layout

		result = toint( r );
\end_layout

\begin_layout Plain Layout

		if toreal( result ) > r then
\end_layout

\begin_layout Plain Layout

			result = result - 1;
\end_layout

\begin_layout Plain Layout

		endif;
\end_layout

\begin_layout Plain Layout

		return result;
\end_layout

\begin_layout Plain Layout

	end ceil
\end_layout

\begin_layout Plain Layout

	func floor( r: real; ) : int
\end_layout

\begin_layout Plain Layout

		var result: int;
\end_layout

\begin_layout Plain Layout

	begin floor
\end_layout

\begin_layout Plain Layout

		result = toint( r );
\end_layout

\begin_layout Plain Layout

		if toreal( result ) < r then
\end_layout

\begin_layout Plain Layout

			result = result + 1;
\end_layout

\begin_layout Plain Layout

		endif;
\end_layout

\begin_layout Plain Layout

		return result;
\end_layout

\begin_layout Plain Layout

	end floor
\end_layout

\begin_layout Plain Layout

	func mod( a, b: int; ) : int
\end_layout

\begin_layout Plain Layout

	begin mod
\end_layout

\begin_layout Plain Layout

		return a - ceil( toreal( a ) / toreal( b ) ) * b;
\end_layout

\begin_layout Plain Layout

	end mod
\end_layout

\begin_layout Plain Layout

	func is_even( a: int; ) : bool
\end_layout

\begin_layout Plain Layout

	begin is_even
\end_layout

\begin_layout Plain Layout

		return mod( a, 2 ) == 0;
\end_layout

\begin_layout Plain Layout

	end is_even
\end_layout

\begin_layout Plain Layout

	func xor( a, b: bool; ) : bool
\end_layout

\begin_layout Plain Layout

	begin xor
\end_layout

\begin_layout Plain Layout

		return ( a and not b ) or ( not a and b );
\end_layout

\begin_layout Plain Layout

	end xor
\end_layout

\begin_layout Plain Layout

	func next_permutation( p: permutation; ) : permutation
\end_layout

\begin_layout Plain Layout

		var
\end_layout

\begin_layout Plain Layout

			result: permutation;
\end_layout

\begin_layout Plain Layout

			len, i: int;
\end_layout

\begin_layout Plain Layout

		func circ_shift( s: pseudo_string; a, b: int; ) : pseudo_string 
\end_layout

\begin_layout Plain Layout

			var
\end_layout

\begin_layout Plain Layout

				i: int;
\end_layout

\begin_layout Plain Layout

				temp: char;
\end_layout

\begin_layout Plain Layout

		begin circ_shift
\end_layout

\begin_layout Plain Layout

			for i = a to b-1 do
\end_layout

\begin_layout Plain Layout

				temp = s[ i ];
\end_layout

\begin_layout Plain Layout

				s[ i ] = s[ i + 1 ];
\end_layout

\begin_layout Plain Layout

				s[ i + 1 ] = temp;
\end_layout

\begin_layout Plain Layout

			endfor;
\end_layout

\begin_layout Plain Layout

			return s;
\end_layout

\begin_layout Plain Layout

		end circ_shift
\end_layout

\begin_layout Plain Layout

		func flip( s: pseudo_string; a, b: int; ) : pseudo_string 
\end_layout

\begin_layout Plain Layout

			var
\end_layout

\begin_layout Plain Layout

				i: int;
\end_layout

\begin_layout Plain Layout

				temp: char;
\end_layout

\begin_layout Plain Layout

		begin flip
\end_layout

\begin_layout Plain Layout

			for i = 0 to floor( toreal( b - a ) / 2.0 ) - 1 do
\end_layout

\begin_layout Plain Layout

				temp = s[ a + i ];
\end_layout

\begin_layout Plain Layout

				s[ a + i ] = s[ b - i ];
\end_layout

\begin_layout Plain Layout

				s[ b - i ] = temp;
\end_layout

\begin_layout Plain Layout

			endfor;
\end_layout

\begin_layout Plain Layout

			return s;
\end_layout

\begin_layout Plain Layout

		end flip
\end_layout

\begin_layout Plain Layout

	begin next_permutation
\end_layout

\begin_layout Plain Layout

		len = strlen( p.str );
\end_layout

\begin_layout Plain Layout

		p.perm = p.perm + 1;
\end_layout

\begin_layout Plain Layout

		if p.perm == factorial( len ) then
\end_layout

\begin_layout Plain Layout

			p.perm = 0;
\end_layout

\begin_layout Plain Layout

			p.str = flip( p.str, 0, len - 1 );
\end_layout

\begin_layout Plain Layout

			return p;
\end_layout

\begin_layout Plain Layout

		endif;
\end_layout

\begin_layout Plain Layout

		for i = 2 to len do
\end_layout

\begin_layout Plain Layout

			if mod( p.perm, factorial( i ) ) != 0 then
\end_layout

\begin_layout Plain Layout

				p.str = circ_shift( flip( p.str, len - i + 1, len - 1 ),
\end_layout

\begin_layout Plain Layout

											len - i,
\end_layout

\begin_layout Plain Layout

											len - 1 );
\end_layout

\begin_layout Plain Layout

				break;
\end_layout

\begin_layout Plain Layout

			endif;
\end_layout

\begin_layout Plain Layout

		endfor;
\end_layout

\begin_layout Plain Layout

		return p;
\end_layout

\begin_layout Plain Layout

	end next_permutation
\end_layout

\begin_layout Plain Layout

begin main
\end_layout

\begin_layout Plain Layout

	write INTRO;
\end_layout

\begin_layout Plain Layout

	p.str = rd pseudo_string;
\end_layout

\begin_layout Plain Layout

	word = p.str;
\end_layout

\begin_layout Plain Layout

	write vector( struct( "Word:", word ) );
\end_layout

\begin_layout Plain Layout

	-- Iterative permutations
\end_layout

\begin_layout Plain Layout

	for i = 0 to factorial( strlen( p.str ) ) - 1 do
\end_layout

\begin_layout Plain Layout

		p = wr next_permutation( p );
\end_layout

\begin_layout Plain Layout

	endfor;
\end_layout

\begin_layout Plain Layout

	-- Recursive permutations
\end_layout

\begin_layout Plain Layout

	word = recursive_permutation( word, new_pseudo_string(), 0 );
\end_layout

\begin_layout Plain Layout

	return 0;
\end_layout

\begin_layout Plain Layout

end main
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
S code 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ref{lst:perm_scode}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[caption={S Code of Permutations},label={perm_scode}]
\end_layout

\begin_layout Plain Layout

SCODE 666
\end_layout

\begin_layout Plain Layout

PUSH 0 7 -1
\end_layout

\begin_layout Plain Layout

GOTO 4
\end_layout

\begin_layout Plain Layout

POP
\end_layout

\begin_layout Plain Layout

HALT
\end_layout

\begin_layout Plain Layout

FUNC 1
\end_layout

\begin_layout Plain Layout

NEW 4
\end_layout

\begin_layout Plain Layout

NEWS 19
\end_layout

\begin_layout Plain Layout

NEWS 15
\end_layout

\begin_layout Plain Layout

NEWS 15
\end_layout

\begin_layout Plain Layout

NEW 4
\end_layout

\begin_layout Plain Layout

NEW 8
\end_layout

\begin_layout Plain Layout

LDI 15
\end_layout

\begin_layout Plain Layout

STO 0 5
\end_layout

\begin_layout Plain Layout

LDS "Insert a word:"
\end_layout

\begin_layout Plain Layout

STO 0 6
\end_layout

\begin_layout Plain Layout

NEW 4
\end_layout

\begin_layout Plain Layout

LOD 0 6
\end_layout

\begin_layout Plain Layout

WRITE "s"
\end_layout

\begin_layout Plain Layout

LDA 0 2
\end_layout

\begin_layout Plain Layout

RD "[15,c]"
\end_layout

\begin_layout Plain Layout

IST
\end_layout

\begin_layout Plain Layout

LDA 0 2
\end_layout

\begin_layout Plain Layout

EIL 15
\end_layout

\begin_layout Plain Layout

STO 0 3
\end_layout

\begin_layout Plain Layout

LDS "Word:"
\end_layout

\begin_layout Plain Layout

LOD 0 3
\end_layout

\begin_layout Plain Layout

CAT 2 23
\end_layout

\begin_layout Plain Layout

CAT 1 23
\end_layout

\begin_layout Plain Layout

WRITE "[1,(:s,:[15,c])]"
\end_layout

\begin_layout Plain Layout

LDA 0 2
\end_layout

\begin_layout Plain Layout

EIL 15
\end_layout

\begin_layout Plain Layout

PUSH 1 2 0
\end_layout

\begin_layout Plain Layout

GOTO 95
\end_layout

\begin_layout Plain Layout

POP
\end_layout

\begin_layout Plain Layout

PUSH 1 2 0
\end_layout

\begin_layout Plain Layout

GOTO 371
\end_layout

\begin_layout Plain Layout

POP
\end_layout

\begin_layout Plain Layout

LDI 1
\end_layout

\begin_layout Plain Layout

IMINUS
\end_layout

\begin_layout Plain Layout

STO 0 7
\end_layout

\begin_layout Plain Layout

LDI 0
\end_layout

\begin_layout Plain Layout

STO 0 1
\end_layout

\begin_layout Plain Layout

LOD 0 1
\end_layout

\begin_layout Plain Layout

LOD 0 7
\end_layout

\begin_layout Plain Layout

ILE
\end_layout

\begin_layout Plain Layout

JMF 12
\end_layout

\begin_layout Plain Layout

LOD 0 2
\end_layout

\begin_layout Plain Layout

PUSH 1 4 0
\end_layout

\begin_layout Plain Layout

GOTO 469
\end_layout

\begin_layout Plain Layout

POP
\end_layout

\begin_layout Plain Layout

WR "(str:[15,c],perm:i)"
\end_layout

\begin_layout Plain Layout

STO 0 2
\end_layout

\begin_layout Plain Layout

LOD 0 1
\end_layout

\begin_layout Plain Layout

LDI 1
\end_layout

\begin_layout Plain Layout

IPLUS
\end_layout

\begin_layout Plain Layout

STO 0 1
\end_layout

\begin_layout Plain Layout

JMP -14
\end_layout

\begin_layout Plain Layout

LOD 0 3
\end_layout

\begin_layout Plain Layout

PUSH 0 3 0
\end_layout

\begin_layout Plain Layout

GOTO 69
\end_layout

\begin_layout Plain Layout

POP
\end_layout

\begin_layout Plain Layout

LDI 0
\end_layout

\begin_layout Plain Layout

PUSH 3 7 0
\end_layout

\begin_layout Plain Layout

GOTO 248
\end_layout

\begin_layout Plain Layout

POP
\end_layout

\begin_layout Plain Layout

STO 0 3
\end_layout

\begin_layout Plain Layout

LDI 0
\end_layout

\begin_layout Plain Layout

RETURN
\end_layout

\begin_layout Plain Layout

FUNC 2
\end_layout

\begin_layout Plain Layout

NEWS 15
\end_layout

\begin_layout Plain Layout

NEW 4
\end_layout

\begin_layout Plain Layout

NEW 4
\end_layout

\begin_layout Plain Layout

LOD 1 5
\end_layout

\begin_layout Plain Layout

LDI 1
\end_layout

\begin_layout Plain Layout

IMINUS
\end_layout

\begin_layout Plain Layout

STO 0 3
\end_layout

\begin_layout Plain Layout

LDI 0
\end_layout

\begin_layout Plain Layout

STO 0 2
\end_layout

\begin_layout Plain Layout

LOD 0 2
\end_layout

\begin_layout Plain Layout

LOD 0 3
\end_layout

\begin_layout Plain Layout

ILE
\end_layout

\begin_layout Plain Layout

JMF 11
\end_layout

\begin_layout Plain Layout

LDA 0 1
\end_layout

\begin_layout Plain Layout

LOD 0 2
\end_layout

\begin_layout Plain Layout

IXA 1
\end_layout

\begin_layout Plain Layout

LDC '
\backslash
0'
\end_layout

\begin_layout Plain Layout

IST
\end_layout

\begin_layout Plain Layout

LOD 0 2
\end_layout

\begin_layout Plain Layout

LDI 1
\end_layout

\begin_layout Plain Layout

IPLUS
\end_layout

\begin_layout Plain Layout

STO 0 2
\end_layout

\begin_layout Plain Layout

JMP -13
\end_layout

\begin_layout Plain Layout

LOD 0 1
\end_layout

\begin_layout Plain Layout

RETURN
\end_layout

\begin_layout Plain Layout

FUNC 3
\end_layout

\begin_layout Plain Layout

NEW 4
\end_layout

\begin_layout Plain Layout

NEW 4
\end_layout

\begin_layout Plain Layout

LOD 1 5
\end_layout

\begin_layout Plain Layout

LDI 1
\end_layout

\begin_layout Plain Layout

IMINUS
\end_layout

\begin_layout Plain Layout

STO 0 3
\end_layout

\begin_layout Plain Layout

LDI 0
\end_layout

\begin_layout Plain Layout

STO 0 2
\end_layout

\begin_layout Plain Layout

LOD 0 2
\end_layout

\begin_layout Plain Layout

LOD 0 3
\end_layout

\begin_layout Plain Layout

ILE
\end_layout

\begin_layout Plain Layout

JMF 15
\end_layout

\begin_layout Plain Layout

LDA 0 1
\end_layout

\begin_layout Plain Layout

LOD 0 2
\end_layout

\begin_layout Plain Layout

IXA 1
\end_layout

\begin_layout Plain Layout

EIL 1
\end_layout

\begin_layout Plain Layout

LDC '
\backslash
0'
\end_layout

\begin_layout Plain Layout

EQU
\end_layout

\begin_layout Plain Layout

JMF 3
\end_layout

\begin_layout Plain Layout

JMP 7
\end_layout

\begin_layout Plain Layout

JMP 1
\end_layout

\begin_layout Plain Layout

LOD 0 2
\end_layout

\begin_layout Plain Layout

LDI 1
\end_layout

\begin_layout Plain Layout

IPLUS
\end_layout

\begin_layout Plain Layout

STO 0 2
\end_layout

\begin_layout Plain Layout

JMP -17
\end_layout

\begin_layout Plain Layout

LOD 0 2
\end_layout

\begin_layout Plain Layout

RETURN
\end_layout

\begin_layout Plain Layout

FUNC 4
\end_layout

\begin_layout Plain Layout

NEWS 15
\end_layout

\begin_layout Plain Layout

NEWS 15
\end_layout

\begin_layout Plain Layout

NEW 1
\end_layout

\begin_layout Plain Layout

NEWS 30
\end_layout

\begin_layout Plain Layout

NEW 4
\end_layout

\begin_layout Plain Layout

NEW 4
\end_layout

\begin_layout Plain Layout

NEWS 15
\end_layout

\begin_layout Plain Layout

NEW 4
\end_layout

\begin_layout Plain Layout

NEW 4
\end_layout

\begin_layout Plain Layout

LOD 0 1
\end_layout

\begin_layout Plain Layout

PUSH 1 2 1
\end_layout

\begin_layout Plain Layout

GOTO 95
\end_layout

\begin_layout Plain Layout

POP
\end_layout

\begin_layout Plain Layout

LOD 0 2
\end_layout

\begin_layout Plain Layout

PUSH 1 2 1
\end_layout

\begin_layout Plain Layout

GOTO 95
\end_layout

\begin_layout Plain Layout

POP
\end_layout

\begin_layout Plain Layout

IPLUS
\end_layout

\begin_layout Plain Layout

LOD 1 5
\end_layout

\begin_layout Plain Layout

ILE
\end_layout

\begin_layout Plain Layout

JMF 52
\end_layout

\begin_layout Plain Layout

LOD 0 1
\end_layout

\begin_layout Plain Layout

LOD 0 2
\end_layout

\begin_layout Plain Layout

CAT 2 30
\end_layout

\begin_layout Plain Layout

STO 0 6
\end_layout

\begin_layout Plain Layout

LDI 1
\end_layout

\begin_layout Plain Layout

STO 0 8
\end_layout

\begin_layout Plain Layout

LDI 0
\end_layout

\begin_layout Plain Layout

STO 0 7
\end_layout

\begin_layout Plain Layout

LOD 0 7
\end_layout

\begin_layout Plain Layout

LOD 0 8
\end_layout

\begin_layout Plain Layout

ILE
\end_layout

\begin_layout Plain Layout

JMF 39
\end_layout

\begin_layout Plain Layout

LDA 0 6
\end_layout

\begin_layout Plain Layout

LOD 0 7
\end_layout

\begin_layout Plain Layout

IXA 15
\end_layout

\begin_layout Plain Layout

EIL 15
\end_layout

\begin_layout Plain Layout

STO 0 4
\end_layout

\begin_layout Plain Layout

LOD 0 4
\end_layout

\begin_layout Plain Layout

STO 0 9
\end_layout

\begin_layout Plain Layout

LDI 14
\end_layout

\begin_layout Plain Layout

STO 0 11
\end_layout

\begin_layout Plain Layout

LDI 0
\end_layout

\begin_layout Plain Layout

STO 0 10
\end_layout

\begin_layout Plain Layout

LOD 0 10
\end_layout

\begin_layout Plain Layout

LOD 0 11
\end_layout

\begin_layout Plain Layout

ILE
\end_layout

\begin_layout Plain Layout

JMF 19
\end_layout

\begin_layout Plain Layout

LDA 0 9
\end_layout

\begin_layout Plain Layout

LOD 0 10
\end_layout

\begin_layout Plain Layout

IXA 1
\end_layout

\begin_layout Plain Layout

EIL 1
\end_layout

\begin_layout Plain Layout

STO 0 5
\end_layout

\begin_layout Plain Layout

LDA 0 3
\end_layout

\begin_layout Plain Layout

LOD 0 3
\end_layout

\begin_layout Plain Layout

PUSH 1 2 1
\end_layout

\begin_layout Plain Layout

GOTO 95
\end_layout

\begin_layout Plain Layout

POP
\end_layout

\begin_layout Plain Layout

IXA 1
\end_layout

\begin_layout Plain Layout

LOD 0 5
\end_layout

\begin_layout Plain Layout

IST
\end_layout

\begin_layout Plain Layout

LOD 0 10
\end_layout

\begin_layout Plain Layout

LDI 1
\end_layout

\begin_layout Plain Layout

IPLUS
\end_layout

\begin_layout Plain Layout

STO 0 10
\end_layout

\begin_layout Plain Layout

JMP -21
\end_layout

\begin_layout Plain Layout

LOD 0 7
\end_layout

\begin_layout Plain Layout

LDI 1
\end_layout

\begin_layout Plain Layout

IPLUS
\end_layout

\begin_layout Plain Layout

STO 0 7
\end_layout

\begin_layout Plain Layout

JMP -41
\end_layout

\begin_layout Plain Layout

JMP 1
\end_layout

\begin_layout Plain Layout

LOD 0 3
\end_layout

\begin_layout Plain Layout

RETURN
\end_layout

\begin_layout Plain Layout

FUNC 5
\end_layout

\begin_layout Plain Layout

NEWS 15
\end_layout

\begin_layout Plain Layout

NEW 4
\end_layout

\begin_layout Plain Layout

NEW 4
\end_layout

\begin_layout Plain Layout

LOD 0 1
\end_layout

\begin_layout Plain Layout

PUSH 1 2 1
\end_layout

\begin_layout Plain Layout

GOTO 95
\end_layout

\begin_layout Plain Layout

POP
\end_layout

\begin_layout Plain Layout

LDI 1
\end_layout

\begin_layout Plain Layout

IMINUS
\end_layout

\begin_layout Plain Layout

STO 0 4
\end_layout

\begin_layout Plain Layout

LDI 0
\end_layout

\begin_layout Plain Layout

STO 0 3
\end_layout

\begin_layout Plain Layout

LOD 0 3
\end_layout

\begin_layout Plain Layout

LOD 0 4
\end_layout

\begin_layout Plain Layout

ILE
\end_layout

\begin_layout Plain Layout

JMF 14
\end_layout

\begin_layout Plain Layout

LDA 0 2
\end_layout

\begin_layout Plain Layout

LOD 0 3
\end_layout

\begin_layout Plain Layout

IXA 1
\end_layout

\begin_layout Plain Layout

LDA 0 1
\end_layout

\begin_layout Plain Layout

LOD 0 3
\end_layout

\begin_layout Plain Layout

IXA 1
\end_layout

\begin_layout Plain Layout

EIL 1
\end_layout

\begin_layout Plain Layout

IST
\end_layout

\begin_layout Plain Layout

LOD 0 3
\end_layout

\begin_layout Plain Layout

LDI 1
\end_layout

\begin_layout Plain Layout

IPLUS
\end_layout

\begin_layout Plain Layout

STO 0 3
\end_layout

\begin_layout Plain Layout

JMP -16
\end_layout

\begin_layout Plain Layout

LOD 0 2
\end_layout

\begin_layout Plain Layout

RETURN
\end_layout

\begin_layout Plain Layout

FUNC 6
\end_layout

\begin_layout Plain Layout

LOD 0 1
\end_layout

\begin_layout Plain Layout

LDI 2
\end_layout

\begin_layout Plain Layout

ILE
\end_layout

\begin_layout Plain Layout

JMF 4
\end_layout

\begin_layout Plain Layout

LOD 0 1
\end_layout

\begin_layout Plain Layout

RETURN
\end_layout

\begin_layout Plain Layout

JMP 1
\end_layout

\begin_layout Plain Layout

LOD 0 1
\end_layout

\begin_layout Plain Layout

LOD 0 1
\end_layout

\begin_layout Plain Layout

LDI 1
\end_layout

\begin_layout Plain Layout

IMINUS
\end_layout

\begin_layout Plain Layout

PUSH 1 0 1
\end_layout

\begin_layout Plain Layout

GOTO 231
\end_layout

\begin_layout Plain Layout

POP
\end_layout

\begin_layout Plain Layout

ITIMES
\end_layout

\begin_layout Plain Layout

RETURN
\end_layout

\begin_layout Plain Layout

FUNC 7
\end_layout

\begin_layout Plain Layout

NEWS 15
\end_layout

\begin_layout Plain Layout

NEWS 15
\end_layout

\begin_layout Plain Layout

NEWS 15
\end_layout

\begin_layout Plain Layout

NEWS 15
\end_layout

\begin_layout Plain Layout

NEW 4
\end_layout

\begin_layout Plain Layout

NEW 4
\end_layout

\begin_layout Plain Layout

NEW 4
\end_layout

\begin_layout Plain Layout

LOD 0 1
\end_layout

\begin_layout Plain Layout

PUSH 1 2 1
\end_layout

\begin_layout Plain Layout

GOTO 95
\end_layout

\begin_layout Plain Layout

POP
\end_layout

\begin_layout Plain Layout

LDI 1
\end_layout

\begin_layout Plain Layout

EQU
\end_layout

\begin_layout Plain Layout

JMF 20
\end_layout

\begin_layout Plain Layout

LDS "Recursive permutation:"
\end_layout

\begin_layout Plain Layout

LOD 0 3
\end_layout

\begin_layout Plain Layout

LDI 1
\end_layout

\begin_layout Plain Layout

IPLUS
\end_layout

\begin_layout Plain Layout

LOD 0 2
\end_layout

\begin_layout Plain Layout

LOD 0 1
\end_layout

\begin_layout Plain Layout

PUSH 2 9 1
\end_layout

\begin_layout Plain Layout

GOTO 124
\end_layout

\begin_layout Plain Layout

POP
\end_layout

\begin_layout Plain Layout

CAT 3 27
\end_layout

\begin_layout Plain Layout

CAT 1 27
\end_layout

\begin_layout Plain Layout

WRITE "[1,(:s,:i,:[15,c])]"
\end_layout

\begin_layout Plain Layout

LOD 0 2
\end_layout

\begin_layout Plain Layout

LOD 0 1
\end_layout

\begin_layout Plain Layout

PUSH 2 9 1
\end_layout

\begin_layout Plain Layout

GOTO 124
\end_layout

\begin_layout Plain Layout

POP
\end_layout

\begin_layout Plain Layout

RETURN
\end_layout

\begin_layout Plain Layout

JMP 1
\end_layout

\begin_layout Plain Layout

LDI 0
\end_layout

\begin_layout Plain Layout

STO 0 9
\end_layout

\begin_layout Plain Layout

PUSH 0 3 1
\end_layout

\begin_layout Plain Layout

GOTO 69
\end_layout

\begin_layout Plain Layout

POP
\end_layout

\begin_layout Plain Layout

STO 0 7
\end_layout

\begin_layout Plain Layout

LOD 0 9
\end_layout

\begin_layout Plain Layout

LOD 0 1
\end_layout

\begin_layout Plain Layout

PUSH 1 2 1
\end_layout

\begin_layout Plain Layout

GOTO 95
\end_layout

\begin_layout Plain Layout

POP
\end_layout

\begin_layout Plain Layout

ILT
\end_layout

\begin_layout Plain Layout

JMF 75
\end_layout

\begin_layout Plain Layout

LOD 0 2
\end_layout

\begin_layout Plain Layout

PUSH 1 3 1
\end_layout

\begin_layout Plain Layout

GOTO 199
\end_layout

\begin_layout Plain Layout

POP
\end_layout

\begin_layout Plain Layout

STO 0 5
\end_layout

\begin_layout Plain Layout

PUSH 0 3 1
\end_layout

\begin_layout Plain Layout

GOTO 69
\end_layout

\begin_layout Plain Layout

POP
\end_layout

\begin_layout Plain Layout

STO 0 4
\end_layout

\begin_layout Plain Layout

LOD 0 1
\end_layout

\begin_layout Plain Layout

PUSH 1 2 1
\end_layout

\begin_layout Plain Layout

GOTO 95
\end_layout

\begin_layout Plain Layout

POP
\end_layout

\begin_layout Plain Layout

LDI 1
\end_layout

\begin_layout Plain Layout

IMINUS
\end_layout

\begin_layout Plain Layout

STO 0 10
\end_layout

\begin_layout Plain Layout

LDI 0
\end_layout

\begin_layout Plain Layout

STO 0 8
\end_layout

\begin_layout Plain Layout

LOD 0 8
\end_layout

\begin_layout Plain Layout

LOD 0 10
\end_layout

\begin_layout Plain Layout

ILE
\end_layout

\begin_layout Plain Layout

JMF 31
\end_layout

\begin_layout Plain Layout

LDA 0 7
\end_layout

\begin_layout Plain Layout

LDI 0
\end_layout

\begin_layout Plain Layout

IXA 1
\end_layout

\begin_layout Plain Layout

LDA 0 1
\end_layout

\begin_layout Plain Layout

LOD 0 8
\end_layout

\begin_layout Plain Layout

IXA 1
\end_layout

\begin_layout Plain Layout

EIL 1
\end_layout

\begin_layout Plain Layout

IST
\end_layout

\begin_layout Plain Layout

LOD 0 8
\end_layout

\begin_layout Plain Layout

LOD 0 9
\end_layout

\begin_layout Plain Layout

NEQ
\end_layout

\begin_layout Plain Layout

JMF 8
\end_layout

\begin_layout Plain Layout

LOD 0 4
\end_layout

\begin_layout Plain Layout

LOD 0 7
\end_layout

\begin_layout Plain Layout

PUSH 2 9 1
\end_layout

\begin_layout Plain Layout

GOTO 124
\end_layout

\begin_layout Plain Layout

POP
\end_layout

\begin_layout Plain Layout

STO 0 4
\end_layout

\begin_layout Plain Layout

JMP 7
\end_layout

\begin_layout Plain Layout

LOD 0 5
\end_layout

\begin_layout Plain Layout

LOD 0 7
\end_layout

\begin_layout Plain Layout

PUSH 2 9 1
\end_layout

\begin_layout Plain Layout

GOTO 124
\end_layout

\begin_layout Plain Layout

POP
\end_layout

\begin_layout Plain Layout

STO 0 5
\end_layout

\begin_layout Plain Layout

LOD 0 8
\end_layout

\begin_layout Plain Layout

LDI 1
\end_layout

\begin_layout Plain Layout

IPLUS
\end_layout

\begin_layout Plain Layout

STO 0 8
\end_layout

\begin_layout Plain Layout

JMP -33
\end_layout

\begin_layout Plain Layout

LOD 0 4
\end_layout

\begin_layout Plain Layout

LOD 0 5
\end_layout

\begin_layout Plain Layout

LOD 0 3
\end_layout

\begin_layout Plain Layout

PUSH 3 7 1
\end_layout

\begin_layout Plain Layout

GOTO 248
\end_layout

\begin_layout Plain Layout

POP
\end_layout

\begin_layout Plain Layout

STO 0 6
\end_layout

\begin_layout Plain Layout

LOD 0 3
\end_layout

\begin_layout Plain Layout

LOD 0 4
\end_layout

\begin_layout Plain Layout

PUSH 1 2 1
\end_layout

\begin_layout Plain Layout

GOTO 95
\end_layout

\begin_layout Plain Layout

POP
\end_layout

\begin_layout Plain Layout

PUSH 1 0 1
\end_layout

\begin_layout Plain Layout

GOTO 231
\end_layout

\begin_layout Plain Layout

POP
\end_layout

\begin_layout Plain Layout

IPLUS
\end_layout

\begin_layout Plain Layout

STO 0 3
\end_layout

\begin_layout Plain Layout

LOD 0 9
\end_layout

\begin_layout Plain Layout

LDI 1
\end_layout

\begin_layout Plain Layout

IPLUS
\end_layout

\begin_layout Plain Layout

STO 0 9
\end_layout

\begin_layout Plain Layout

JMP -80
\end_layout

\begin_layout Plain Layout

LOD 0 6
\end_layout

\begin_layout Plain Layout

RETURN
\end_layout

\begin_layout Plain Layout

FUNC 8
\end_layout

\begin_layout Plain Layout

NEW 4
\end_layout

\begin_layout Plain Layout

NEW 4
\end_layout

\begin_layout Plain Layout

LDI 1
\end_layout

\begin_layout Plain Layout

STO 0 2
\end_layout

\begin_layout Plain Layout

LOD 0 1
\end_layout

\begin_layout Plain Layout

STO 0 3
\end_layout

\begin_layout Plain Layout

LDI 2
\end_layout

\begin_layout Plain Layout

STO 0 1
\end_layout

\begin_layout Plain Layout

LOD 0 1
\end_layout

\begin_layout Plain Layout

LOD 0 3
\end_layout

\begin_layout Plain Layout

ILE
\end_layout

\begin_layout Plain Layout

JMF 10
\end_layout

\begin_layout Plain Layout

LOD 0 2
\end_layout

\begin_layout Plain Layout

LOD 0 1
\end_layout

\begin_layout Plain Layout

ITIMES
\end_layout

\begin_layout Plain Layout

STO 0 2
\end_layout

\begin_layout Plain Layout

LOD 0 1
\end_layout

\begin_layout Plain Layout

LDI 1
\end_layout

\begin_layout Plain Layout

IPLUS
\end_layout

\begin_layout Plain Layout

STO 0 1
\end_layout

\begin_layout Plain Layout

JMP -12
\end_layout

\begin_layout Plain Layout

LOD 0 2
\end_layout

\begin_layout Plain Layout

RETURN
\end_layout

\begin_layout Plain Layout

FUNC 9
\end_layout

\begin_layout Plain Layout

NEW 4
\end_layout

\begin_layout Plain Layout

LOD 0 1
\end_layout

\begin_layout Plain Layout

TOINT
\end_layout

\begin_layout Plain Layout

STO 0 2
\end_layout

\begin_layout Plain Layout

LOD 0 2
\end_layout

\begin_layout Plain Layout

TOREAL
\end_layout

\begin_layout Plain Layout

LOD 0 1
\end_layout

\begin_layout Plain Layout

RGT
\end_layout

\begin_layout Plain Layout

JMF 6
\end_layout

\begin_layout Plain Layout

LOD 0 2
\end_layout

\begin_layout Plain Layout

LDI 1
\end_layout

\begin_layout Plain Layout

IMINUS
\end_layout

\begin_layout Plain Layout

STO 0 2
\end_layout

\begin_layout Plain Layout

JMP 1
\end_layout

\begin_layout Plain Layout

LOD 0 2
\end_layout

\begin_layout Plain Layout

RETURN
\end_layout

\begin_layout Plain Layout

FUNC 10
\end_layout

\begin_layout Plain Layout

NEW 4
\end_layout

\begin_layout Plain Layout

LOD 0 1
\end_layout

\begin_layout Plain Layout

TOINT
\end_layout

\begin_layout Plain Layout

STO 0 2
\end_layout

\begin_layout Plain Layout

LOD 0 2
\end_layout

\begin_layout Plain Layout

TOREAL
\end_layout

\begin_layout Plain Layout

LOD 0 1
\end_layout

\begin_layout Plain Layout

RLT
\end_layout

\begin_layout Plain Layout

JMF 6
\end_layout

\begin_layout Plain Layout

LOD 0 2
\end_layout

\begin_layout Plain Layout

LDI 1
\end_layout

\begin_layout Plain Layout

IPLUS
\end_layout

\begin_layout Plain Layout

STO 0 2
\end_layout

\begin_layout Plain Layout

JMP 1
\end_layout

\begin_layout Plain Layout

LOD 0 2
\end_layout

\begin_layout Plain Layout

RETURN
\end_layout

\begin_layout Plain Layout

FUNC 11
\end_layout

\begin_layout Plain Layout

LOD 0 1
\end_layout

\begin_layout Plain Layout

LOD 0 1
\end_layout

\begin_layout Plain Layout

TOREAL
\end_layout

\begin_layout Plain Layout

LOD 0 2
\end_layout

\begin_layout Plain Layout

TOREAL
\end_layout

\begin_layout Plain Layout

RDIV
\end_layout

\begin_layout Plain Layout

PUSH 1 1 1
\end_layout

\begin_layout Plain Layout

GOTO 395
\end_layout

\begin_layout Plain Layout

POP
\end_layout

\begin_layout Plain Layout

LOD 0 2
\end_layout

\begin_layout Plain Layout

ITIMES
\end_layout

\begin_layout Plain Layout

IMINUS
\end_layout

\begin_layout Plain Layout

RETURN
\end_layout

\begin_layout Plain Layout

FUNC 12
\end_layout

\begin_layout Plain Layout

LOD 0 1
\end_layout

\begin_layout Plain Layout

LDI 2
\end_layout

\begin_layout Plain Layout

PUSH 2 0 1
\end_layout

\begin_layout Plain Layout

GOTO 429
\end_layout

\begin_layout Plain Layout

POP
\end_layout

\begin_layout Plain Layout

LDI 0
\end_layout

\begin_layout Plain Layout

EQU
\end_layout

\begin_layout Plain Layout

RETURN
\end_layout

\begin_layout Plain Layout

FUNC 13
\end_layout

\begin_layout Plain Layout

LOD 0 1
\end_layout

\begin_layout Plain Layout

JMF 4
\end_layout

\begin_layout Plain Layout

LOD 0 2
\end_layout

\begin_layout Plain Layout

NEG
\end_layout

\begin_layout Plain Layout

JMP 2
\end_layout

\begin_layout Plain Layout

LDC '0'
\end_layout

\begin_layout Plain Layout

JMF 3
\end_layout

\begin_layout Plain Layout

LDC '1'
\end_layout

\begin_layout Plain Layout

JMP 7
\end_layout

\begin_layout Plain Layout

LOD 0 1
\end_layout

\begin_layout Plain Layout

NEG
\end_layout

\begin_layout Plain Layout

JMF 3
\end_layout

\begin_layout Plain Layout

LOD 0 2
\end_layout

\begin_layout Plain Layout

JMP 2
\end_layout

\begin_layout Plain Layout

LDC '0'
\end_layout

\begin_layout Plain Layout

RETURN
\end_layout

\begin_layout Plain Layout

FUNC 14
\end_layout

\begin_layout Plain Layout

NEWS 19
\end_layout

\begin_layout Plain Layout

NEW 4
\end_layout

\begin_layout Plain Layout

NEW 4
\end_layout

\begin_layout Plain Layout

NEW 4
\end_layout

\begin_layout Plain Layout

LDA 0 1
\end_layout

\begin_layout Plain Layout

EIL 15
\end_layout

\begin_layout Plain Layout

PUSH 1 2 1
\end_layout

\begin_layout Plain Layout

GOTO 95
\end_layout

\begin_layout Plain Layout

POP
\end_layout

\begin_layout Plain Layout

STO 0 3
\end_layout

\begin_layout Plain Layout

LDA 0 1
\end_layout

\begin_layout Plain Layout

FDA 15
\end_layout

\begin_layout Plain Layout

LDA 0 1
\end_layout

\begin_layout Plain Layout

FDA 15
\end_layout

\begin_layout Plain Layout

EIL 4
\end_layout

\begin_layout Plain Layout

LDI 1
\end_layout

\begin_layout Plain Layout

IPLUS
\end_layout

\begin_layout Plain Layout

IST
\end_layout

\begin_layout Plain Layout

LDA 0 1
\end_layout

\begin_layout Plain Layout

FDA 15
\end_layout

\begin_layout Plain Layout

EIL 4
\end_layout

\begin_layout Plain Layout

LOD 0 3
\end_layout

\begin_layout Plain Layout

PUSH 1 2 1
\end_layout

\begin_layout Plain Layout

GOTO 371
\end_layout

\begin_layout Plain Layout

POP
\end_layout

\begin_layout Plain Layout

EQU
\end_layout

\begin_layout Plain Layout

JMF 19
\end_layout

\begin_layout Plain Layout

LDA 0 1
\end_layout

\begin_layout Plain Layout

FDA 15
\end_layout

\begin_layout Plain Layout

LDI 0
\end_layout

\begin_layout Plain Layout

IST
\end_layout

\begin_layout Plain Layout

LDA 0 1
\end_layout

\begin_layout Plain Layout

LDA 0 1
\end_layout

\begin_layout Plain Layout

EIL 15
\end_layout

\begin_layout Plain Layout

LDI 0
\end_layout

\begin_layout Plain Layout

LOD 0 3
\end_layout

\begin_layout Plain Layout

LDI 1
\end_layout

\begin_layout Plain Layout

IMINUS
\end_layout

\begin_layout Plain Layout

PUSH 3 3 0
\end_layout

\begin_layout Plain Layout

GOTO 612
\end_layout

\begin_layout Plain Layout

POP
\end_layout

\begin_layout Plain Layout

IST
\end_layout

\begin_layout Plain Layout

LOD 0 1
\end_layout

\begin_layout Plain Layout

RETURN
\end_layout

\begin_layout Plain Layout

JMP 1
\end_layout

\begin_layout Plain Layout

LOD 0 3
\end_layout

\begin_layout Plain Layout

STO 0 5
\end_layout

\begin_layout Plain Layout

LDI 2
\end_layout

\begin_layout Plain Layout

STO 0 4
\end_layout

\begin_layout Plain Layout

LOD 0 4
\end_layout

\begin_layout Plain Layout

LOD 0 5
\end_layout

\begin_layout Plain Layout

ILE
\end_layout

\begin_layout Plain Layout

JMF 45
\end_layout

\begin_layout Plain Layout

LDA 0 1
\end_layout

\begin_layout Plain Layout

FDA 15
\end_layout

\begin_layout Plain Layout

EIL 4
\end_layout

\begin_layout Plain Layout

LOD 0 4
\end_layout

\begin_layout Plain Layout

PUSH 1 2 1
\end_layout

\begin_layout Plain Layout

GOTO 371
\end_layout

\begin_layout Plain Layout

POP
\end_layout

\begin_layout Plain Layout

PUSH 2 0 1
\end_layout

\begin_layout Plain Layout

GOTO 429
\end_layout

\begin_layout Plain Layout

POP
\end_layout

\begin_layout Plain Layout

LDI 0
\end_layout

\begin_layout Plain Layout

NEQ
\end_layout

\begin_layout Plain Layout

JMF 27
\end_layout

\begin_layout Plain Layout

LDA 0 1
\end_layout

\begin_layout Plain Layout

LDA 0 1
\end_layout

\begin_layout Plain Layout

EIL 15
\end_layout

\begin_layout Plain Layout

LOD 0 3
\end_layout

\begin_layout Plain Layout

LOD 0 4
\end_layout

\begin_layout Plain Layout

IMINUS
\end_layout

\begin_layout Plain Layout

LDI 1
\end_layout

\begin_layout Plain Layout

IPLUS
\end_layout

\begin_layout Plain Layout

LOD 0 3
\end_layout

\begin_layout Plain Layout

LDI 1
\end_layout

\begin_layout Plain Layout

IMINUS
\end_layout

\begin_layout Plain Layout

PUSH 3 3 0
\end_layout

\begin_layout Plain Layout

GOTO 612
\end_layout

\begin_layout Plain Layout

POP
\end_layout

\begin_layout Plain Layout

LOD 0 3
\end_layout

\begin_layout Plain Layout

LOD 0 4
\end_layout

\begin_layout Plain Layout

IMINUS
\end_layout

\begin_layout Plain Layout

LOD 0 3
\end_layout

\begin_layout Plain Layout

LDI 1
\end_layout

\begin_layout Plain Layout

IMINUS
\end_layout

\begin_layout Plain Layout

PUSH 3 3 0
\end_layout

\begin_layout Plain Layout

GOTO 569
\end_layout

\begin_layout Plain Layout

POP
\end_layout

\begin_layout Plain Layout

IST
\end_layout

\begin_layout Plain Layout

JMP 7
\end_layout

\begin_layout Plain Layout

JMP 1
\end_layout

\begin_layout Plain Layout

LOD 0 4
\end_layout

\begin_layout Plain Layout

LDI 1
\end_layout

\begin_layout Plain Layout

IPLUS
\end_layout

\begin_layout Plain Layout

STO 0 4
\end_layout

\begin_layout Plain Layout

JMP -47
\end_layout

\begin_layout Plain Layout

LOD 0 1
\end_layout

\begin_layout Plain Layout

RETURN
\end_layout

\begin_layout Plain Layout

FUNC 15
\end_layout

\begin_layout Plain Layout

NEW 4
\end_layout

\begin_layout Plain Layout

NEW 1
\end_layout

\begin_layout Plain Layout

NEW 4
\end_layout

\begin_layout Plain Layout

LOD 0 3
\end_layout

\begin_layout Plain Layout

LDI 1
\end_layout

\begin_layout Plain Layout

IMINUS
\end_layout

\begin_layout Plain Layout

STO 0 6
\end_layout

\begin_layout Plain Layout

LOD 0 2
\end_layout

\begin_layout Plain Layout

STO 0 4
\end_layout

\begin_layout Plain Layout

LOD 0 4
\end_layout

\begin_layout Plain Layout

LOD 0 6
\end_layout

\begin_layout Plain Layout

ILE
\end_layout

\begin_layout Plain Layout

JMF 28
\end_layout

\begin_layout Plain Layout

LDA 0 1
\end_layout

\begin_layout Plain Layout

LOD 0 4
\end_layout

\begin_layout Plain Layout

IXA 1
\end_layout

\begin_layout Plain Layout

EIL 1
\end_layout

\begin_layout Plain Layout

STO 0 5
\end_layout

\begin_layout Plain Layout

LDA 0 1
\end_layout

\begin_layout Plain Layout

LOD 0 4
\end_layout

\begin_layout Plain Layout

IXA 1
\end_layout

\begin_layout Plain Layout

LDA 0 1
\end_layout

\begin_layout Plain Layout

LOD 0 4
\end_layout

\begin_layout Plain Layout

LDI 1
\end_layout

\begin_layout Plain Layout

IPLUS
\end_layout

\begin_layout Plain Layout

IXA 1
\end_layout

\begin_layout Plain Layout

EIL 1
\end_layout

\begin_layout Plain Layout

IST
\end_layout

\begin_layout Plain Layout

LDA 0 1
\end_layout

\begin_layout Plain Layout

LOD 0 4
\end_layout

\begin_layout Plain Layout

LDI 1
\end_layout

\begin_layout Plain Layout

IPLUS
\end_layout

\begin_layout Plain Layout

IXA 1
\end_layout

\begin_layout Plain Layout

LOD 0 5
\end_layout

\begin_layout Plain Layout

IST
\end_layout

\begin_layout Plain Layout

LOD 0 4
\end_layout

\begin_layout Plain Layout

LDI 1
\end_layout

\begin_layout Plain Layout

IPLUS
\end_layout

\begin_layout Plain Layout

STO 0 4
\end_layout

\begin_layout Plain Layout

JMP -30
\end_layout

\begin_layout Plain Layout

LOD 0 1
\end_layout

\begin_layout Plain Layout

RETURN
\end_layout

\begin_layout Plain Layout

FUNC 16
\end_layout

\begin_layout Plain Layout

NEW 4
\end_layout

\begin_layout Plain Layout

NEW 1
\end_layout

\begin_layout Plain Layout

NEW 4
\end_layout

\begin_layout Plain Layout

LOD 0 3
\end_layout

\begin_layout Plain Layout

LOD 0 2
\end_layout

\begin_layout Plain Layout

IMINUS
\end_layout

\begin_layout Plain Layout

TOREAL
\end_layout

\begin_layout Plain Layout

LDR 2.000000
\end_layout

\begin_layout Plain Layout

RDIV
\end_layout

\begin_layout Plain Layout

PUSH 1 1 2
\end_layout

\begin_layout Plain Layout

GOTO 412
\end_layout

\begin_layout Plain Layout

POP
\end_layout

\begin_layout Plain Layout

LDI 1
\end_layout

\begin_layout Plain Layout

IMINUS
\end_layout

\begin_layout Plain Layout

STO 0 6
\end_layout

\begin_layout Plain Layout

LDI 0
\end_layout

\begin_layout Plain Layout

STO 0 4
\end_layout

\begin_layout Plain Layout

LOD 0 4
\end_layout

\begin_layout Plain Layout

LOD 0 6
\end_layout

\begin_layout Plain Layout

ILE
\end_layout

\begin_layout Plain Layout

JMF 32
\end_layout

\begin_layout Plain Layout

LDA 0 1
\end_layout

\begin_layout Plain Layout

LOD 0 2
\end_layout

\begin_layout Plain Layout

LOD 0 4
\end_layout

\begin_layout Plain Layout

IPLUS
\end_layout

\begin_layout Plain Layout

IXA 1
\end_layout

\begin_layout Plain Layout

EIL 1
\end_layout

\begin_layout Plain Layout

STO 0 5
\end_layout

\begin_layout Plain Layout

LDA 0 1
\end_layout

\begin_layout Plain Layout

LOD 0 2
\end_layout

\begin_layout Plain Layout

LOD 0 4
\end_layout

\begin_layout Plain Layout

IPLUS
\end_layout

\begin_layout Plain Layout

IXA 1
\end_layout

\begin_layout Plain Layout

LDA 0 1
\end_layout

\begin_layout Plain Layout

LOD 0 3
\end_layout

\begin_layout Plain Layout

LOD 0 4
\end_layout

\begin_layout Plain Layout

IMINUS
\end_layout

\begin_layout Plain Layout

IXA 1
\end_layout

\begin_layout Plain Layout

EIL 1
\end_layout

\begin_layout Plain Layout

IST
\end_layout

\begin_layout Plain Layout

LDA 0 1
\end_layout

\begin_layout Plain Layout

LOD 0 3
\end_layout

\begin_layout Plain Layout

LOD 0 4
\end_layout

\begin_layout Plain Layout

IMINUS
\end_layout

\begin_layout Plain Layout

IXA 1
\end_layout

\begin_layout Plain Layout

LOD 0 5
\end_layout

\begin_layout Plain Layout

IST
\end_layout

\begin_layout Plain Layout

LOD 0 4
\end_layout

\begin_layout Plain Layout

LDI 1
\end_layout

\begin_layout Plain Layout

IPLUS
\end_layout

\begin_layout Plain Layout

STO 0 4
\end_layout

\begin_layout Plain Layout

JMP -34
\end_layout

\begin_layout Plain Layout

LOD 0 1
\end_layout

\begin_layout Plain Layout

RETURN
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Section
ORZ's Conway's Game of Life
\end_layout

\begin_layout Standard
The 
\emph on
.sol
\emph default
 code could be seen in the tutorial part (Code 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ref{lst:gol}
\end_layout

\end_inset

).
 Here we report its S-Code (Code 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ref{lst:gol_sol}
\end_layout

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[caption={S Code of Game of Life},label={lst:gol_sol}]
\end_layout

\begin_layout Plain Layout

SCODE 270
\end_layout

\begin_layout Plain Layout

PUSH 0 11 -1
\end_layout

\begin_layout Plain Layout

GOTO 4
\end_layout

\begin_layout Plain Layout

POP
\end_layout

\begin_layout Plain Layout

HALT
\end_layout

\begin_layout Plain Layout

FUNC 1
\end_layout

\begin_layout Plain Layout

NEWS 229
\end_layout

\begin_layout Plain Layout

NEWS 9
\end_layout

\begin_layout Plain Layout

NEW 4
\end_layout

\begin_layout Plain Layout

NEW 4
\end_layout

\begin_layout Plain Layout

NEW 8
\end_layout

\begin_layout Plain Layout

NEW 8
\end_layout

\begin_layout Plain Layout

NEW 8
\end_layout

\begin_layout Plain Layout

NEW 8
\end_layout

\begin_layout Plain Layout

NEW 8
\end_layout

\begin_layout Plain Layout

NEW 8
\end_layout

\begin_layout Plain Layout

LDI 15
\end_layout

\begin_layout Plain Layout

STO 0 4
\end_layout

\begin_layout Plain Layout

LDS "Welcome to ORZ's Conway's Game of Life!"
\end_layout

\begin_layout Plain Layout

STO 0 5
\end_layout

\begin_layout Plain Layout

LDS "Thanks for playing with ORZ's Conway's Game of Life!
\backslash
n
\backslash
n
\backslash
tBye!"
\end_layout

\begin_layout Plain Layout

STO 0 6
\end_layout

\begin_layout Plain Layout

LDS "Your data has been successfully saved in the following file:"
\end_layout

\begin_layout Plain Layout

STO 0 7
\end_layout

\begin_layout Plain Layout

LDS "Enter the filename of your world and if you'd like to load from a saved
 state."
\end_layout

\begin_layout Plain Layout

STO 0 8
\end_layout

\begin_layout Plain Layout

LDS "Enter for how many generations would you like to watch your world go
 by."
\end_layout

\begin_layout Plain Layout

STO 0 9
\end_layout

\begin_layout Plain Layout

LDS "Your world doesn't exist yet.
\backslash
nEnter it now."
\end_layout

\begin_layout Plain Layout

STO 0 10
\end_layout

\begin_layout Plain Layout

NEW 4
\end_layout

\begin_layout Plain Layout

LOD 0 5
\end_layout

\begin_layout Plain Layout

WRITE "s"
\end_layout

\begin_layout Plain Layout

LOD 0 8
\end_layout

\begin_layout Plain Layout

WRITE "s"
\end_layout

\begin_layout Plain Layout

READ 0 2 "(filename:s,load:b)"
\end_layout

\begin_layout Plain Layout

LDA 0 2
\end_layout

\begin_layout Plain Layout

FDA 8
\end_layout

\begin_layout Plain Layout

EIL 1
\end_layout

\begin_layout Plain Layout

JMF 5
\end_layout

\begin_layout Plain Layout

LDA 0 2
\end_layout

\begin_layout Plain Layout

EIL 8
\end_layout

\begin_layout Plain Layout

FREAD 0 1 "(generation:i,world:[15,[15,b]])"
\end_layout

\begin_layout Plain Layout

JMP 7
\end_layout

\begin_layout Plain Layout

LOD 0 10
\end_layout

\begin_layout Plain Layout

WRITE "s"
\end_layout

\begin_layout Plain Layout

LDA 0 1
\end_layout

\begin_layout Plain Layout

FDA 4
\end_layout

\begin_layout Plain Layout

RD "[15,[15,b]]"
\end_layout

\begin_layout Plain Layout

IST
\end_layout

\begin_layout Plain Layout

LOD 0 9
\end_layout

\begin_layout Plain Layout

WRITE "s"
\end_layout

\begin_layout Plain Layout

READ 0 3 "i"
\end_layout

\begin_layout Plain Layout

LOD 0 3
\end_layout

\begin_layout Plain Layout

STO 0 11
\end_layout

\begin_layout Plain Layout

LDI 0
\end_layout

\begin_layout Plain Layout

STO 0 3
\end_layout

\begin_layout Plain Layout

LOD 0 3
\end_layout

\begin_layout Plain Layout

LOD 0 11
\end_layout

\begin_layout Plain Layout

ILE
\end_layout

\begin_layout Plain Layout

JMF 23
\end_layout

\begin_layout Plain Layout

LDA 0 1
\end_layout

\begin_layout Plain Layout

FDA 4
\end_layout

\begin_layout Plain Layout

LDA 0 1
\end_layout

\begin_layout Plain Layout

FDA 4
\end_layout

\begin_layout Plain Layout

EIL 225
\end_layout

\begin_layout Plain Layout

PUSH 1 15 0
\end_layout

\begin_layout Plain Layout

GOTO 96
\end_layout

\begin_layout Plain Layout

POP
\end_layout

\begin_layout Plain Layout

IST
\end_layout

\begin_layout Plain Layout

LDA 0 1
\end_layout

\begin_layout Plain Layout

LDA 0 1
\end_layout

\begin_layout Plain Layout

EIL 4
\end_layout

\begin_layout Plain Layout

LDI 1
\end_layout

\begin_layout Plain Layout

IPLUS
\end_layout

\begin_layout Plain Layout

IST
\end_layout

\begin_layout Plain Layout

LOD 0 1
\end_layout

\begin_layout Plain Layout

WRITE "(generation:i,world:[15,[15,b]])"
\end_layout

\begin_layout Plain Layout

LOD 0 3
\end_layout

\begin_layout Plain Layout

LDI 1
\end_layout

\begin_layout Plain Layout

IPLUS
\end_layout

\begin_layout Plain Layout

STO 0 3
\end_layout

\begin_layout Plain Layout

JMP -25
\end_layout

\begin_layout Plain Layout

LOD 0 1
\end_layout

\begin_layout Plain Layout

LDA 0 2
\end_layout

\begin_layout Plain Layout

EIL 8
\end_layout

\begin_layout Plain Layout

FWRITE "(generation:i,world:[15,[15,b]])"
\end_layout

\begin_layout Plain Layout

LOD 0 6
\end_layout

\begin_layout Plain Layout

LOD 0 7
\end_layout

\begin_layout Plain Layout

LDA 0 2
\end_layout

\begin_layout Plain Layout

EIL 8
\end_layout

\begin_layout Plain Layout

CAT 2 16
\end_layout

\begin_layout Plain Layout

CAT 2 24
\end_layout

\begin_layout Plain Layout

WRITE "(:s,:(:s,:s))"
\end_layout

\begin_layout Plain Layout

LDI 0
\end_layout

\begin_layout Plain Layout

RETURN
\end_layout

\begin_layout Plain Layout

FUNC 2
\end_layout

\begin_layout Plain Layout

NEW 4
\end_layout

\begin_layout Plain Layout

NEW 4
\end_layout

\begin_layout Plain Layout

NEW 4
\end_layout

\begin_layout Plain Layout

NEW 4
\end_layout

\begin_layout Plain Layout

NEW 4
\end_layout

\begin_layout Plain Layout

NEWS 225
\end_layout

\begin_layout Plain Layout

NEWS 12
\end_layout

\begin_layout Plain Layout

LDI -1
\end_layout

\begin_layout Plain Layout

LDI 0
\end_layout

\begin_layout Plain Layout

LDI 1
\end_layout

\begin_layout Plain Layout

CAT 3 12
\end_layout

\begin_layout Plain Layout

STO 0 8
\end_layout

\begin_layout Plain Layout

NEW 4
\end_layout

\begin_layout Plain Layout

NEW 4
\end_layout

\begin_layout Plain Layout

NEWS 12
\end_layout

\begin_layout Plain Layout

NEW 4
\end_layout

\begin_layout Plain Layout

NEW 4
\end_layout

\begin_layout Plain Layout

NEWS 12
\end_layout

\begin_layout Plain Layout

NEW 4
\end_layout

\begin_layout Plain Layout

NEW 4
\end_layout

\begin_layout Plain Layout

LOD 1 4
\end_layout

\begin_layout Plain Layout

STO 0 9
\end_layout

\begin_layout Plain Layout

LDI 0
\end_layout

\begin_layout Plain Layout

STO 0 2
\end_layout

\begin_layout Plain Layout

LOD 0 2
\end_layout

\begin_layout Plain Layout

LOD 0 9
\end_layout

\begin_layout Plain Layout

ILE
\end_layout

\begin_layout Plain Layout

JMF 145
\end_layout

\begin_layout Plain Layout

LOD 1 4
\end_layout

\begin_layout Plain Layout

STO 0 10
\end_layout

\begin_layout Plain Layout

LDI 0
\end_layout

\begin_layout Plain Layout

STO 0 3
\end_layout

\begin_layout Plain Layout

LOD 0 3
\end_layout

\begin_layout Plain Layout

LOD 0 10
\end_layout

\begin_layout Plain Layout

ILE
\end_layout

\begin_layout Plain Layout

JMF 132
\end_layout

\begin_layout Plain Layout

LDI 0
\end_layout

\begin_layout Plain Layout

STO 0 6
\end_layout

\begin_layout Plain Layout

LOD 0 8
\end_layout

\begin_layout Plain Layout

STO 0 11
\end_layout

\begin_layout Plain Layout

LDI 2
\end_layout

\begin_layout Plain Layout

STO 0 13
\end_layout

\begin_layout Plain Layout

LDI 0
\end_layout

\begin_layout Plain Layout

STO 0 12
\end_layout

\begin_layout Plain Layout

LOD 0 12
\end_layout

\begin_layout Plain Layout

LOD 0 13
\end_layout

\begin_layout Plain Layout

ILE
\end_layout

\begin_layout Plain Layout

JMF 89
\end_layout

\begin_layout Plain Layout

LDA 0 11
\end_layout

\begin_layout Plain Layout

LOD 0 12
\end_layout

\begin_layout Plain Layout

IXA 4
\end_layout

\begin_layout Plain Layout

EIL 4
\end_layout

\begin_layout Plain Layout

STO 0 4
\end_layout

\begin_layout Plain Layout

LOD 0 8
\end_layout

\begin_layout Plain Layout

STO 0 14
\end_layout

\begin_layout Plain Layout

LDI 2
\end_layout

\begin_layout Plain Layout

STO 0 16
\end_layout

\begin_layout Plain Layout

LDI 0
\end_layout

\begin_layout Plain Layout

STO 0 15
\end_layout

\begin_layout Plain Layout

LOD 0 15
\end_layout

\begin_layout Plain Layout

LOD 0 16
\end_layout

\begin_layout Plain Layout

ILE
\end_layout

\begin_layout Plain Layout

JMF 69
\end_layout

\begin_layout Plain Layout

LDA 0 14
\end_layout

\begin_layout Plain Layout

LOD 0 15
\end_layout

\begin_layout Plain Layout

IXA 4
\end_layout

\begin_layout Plain Layout

EIL 4
\end_layout

\begin_layout Plain Layout

STO 0 5
\end_layout

\begin_layout Plain Layout

LOD 0 4
\end_layout

\begin_layout Plain Layout

LDI 0
\end_layout

\begin_layout Plain Layout

NEQ
\end_layout

\begin_layout Plain Layout

JMF 3
\end_layout

\begin_layout Plain Layout

LDC '1'
\end_layout

\begin_layout Plain Layout

JMP 4
\end_layout

\begin_layout Plain Layout

LOD 0 5
\end_layout

\begin_layout Plain Layout

LDI 0
\end_layout

\begin_layout Plain Layout

NEQ
\end_layout

\begin_layout Plain Layout

JMF 49
\end_layout

\begin_layout Plain Layout

LOD 0 2
\end_layout

\begin_layout Plain Layout

LOD 0 4
\end_layout

\begin_layout Plain Layout

IPLUS
\end_layout

\begin_layout Plain Layout

LDI 0
\end_layout

\begin_layout Plain Layout

IGE
\end_layout

\begin_layout Plain Layout

JMF 7
\end_layout

\begin_layout Plain Layout

LOD 0 2
\end_layout

\begin_layout Plain Layout

LOD 0 4
\end_layout

\begin_layout Plain Layout

IPLUS
\end_layout

\begin_layout Plain Layout

LOD 1 4
\end_layout

\begin_layout Plain Layout

ILT
\end_layout

\begin_layout Plain Layout

JMP 2
\end_layout

\begin_layout Plain Layout

LDC '0'
\end_layout

\begin_layout Plain Layout

JMF 7
\end_layout

\begin_layout Plain Layout

LOD 0 3
\end_layout

\begin_layout Plain Layout

LOD 0 5
\end_layout

\begin_layout Plain Layout

IPLUS
\end_layout

\begin_layout Plain Layout

LDI 0
\end_layout

\begin_layout Plain Layout

IGE
\end_layout

\begin_layout Plain Layout

JMP 2
\end_layout

\begin_layout Plain Layout

LDC '0'
\end_layout

\begin_layout Plain Layout

JMF 7
\end_layout

\begin_layout Plain Layout

LOD 0 3
\end_layout

\begin_layout Plain Layout

LOD 0 5
\end_layout

\begin_layout Plain Layout

IPLUS
\end_layout

\begin_layout Plain Layout

LOD 1 4
\end_layout

\begin_layout Plain Layout

ILT
\end_layout

\begin_layout Plain Layout

JMP 2
\end_layout

\begin_layout Plain Layout

LDC '0'
\end_layout

\begin_layout Plain Layout

JMF 18
\end_layout

\begin_layout Plain Layout

LDA 0 1
\end_layout

\begin_layout Plain Layout

LOD 0 2
\end_layout

\begin_layout Plain Layout

LOD 0 4
\end_layout

\begin_layout Plain Layout

IPLUS
\end_layout

\begin_layout Plain Layout

IXA 15
\end_layout

\begin_layout Plain Layout

LOD 0 3
\end_layout

\begin_layout Plain Layout

LOD 0 5
\end_layout

\begin_layout Plain Layout

IPLUS
\end_layout

\begin_layout Plain Layout

IXA 1
\end_layout

\begin_layout Plain Layout

EIL 1
\end_layout

\begin_layout Plain Layout

JMF 6
\end_layout

\begin_layout Plain Layout

LOD 0 6
\end_layout

\begin_layout Plain Layout

LDI 1
\end_layout

\begin_layout Plain Layout

IPLUS
\end_layout

\begin_layout Plain Layout

STO 0 6
\end_layout

\begin_layout Plain Layout

JMP 1
\end_layout

\begin_layout Plain Layout

JMP 1
\end_layout

\begin_layout Plain Layout

JMP 1
\end_layout

\begin_layout Plain Layout

LOD 0 15
\end_layout

\begin_layout Plain Layout

LDI 1
\end_layout

\begin_layout Plain Layout

IPLUS
\end_layout

\begin_layout Plain Layout

STO 0 15
\end_layout

\begin_layout Plain Layout

JMP -71
\end_layout

\begin_layout Plain Layout

LOD 0 12
\end_layout

\begin_layout Plain Layout

LDI 1
\end_layout

\begin_layout Plain Layout

IPLUS
\end_layout

\begin_layout Plain Layout

STO 0 12
\end_layout

\begin_layout Plain Layout

JMP -91
\end_layout

\begin_layout Plain Layout

LDA 0 7
\end_layout

\begin_layout Plain Layout

LOD 0 2
\end_layout

\begin_layout Plain Layout

IXA 15
\end_layout

\begin_layout Plain Layout

LOD 0 3
\end_layout

\begin_layout Plain Layout

IXA 1
\end_layout

\begin_layout Plain Layout

LDA 0 1
\end_layout

\begin_layout Plain Layout

LOD 0 2
\end_layout

\begin_layout Plain Layout

IXA 15
\end_layout

\begin_layout Plain Layout

LOD 0 3
\end_layout

\begin_layout Plain Layout

IXA 1
\end_layout

\begin_layout Plain Layout

EIL 1
\end_layout

\begin_layout Plain Layout

JMF 11
\end_layout

\begin_layout Plain Layout

LOD 0 6
\end_layout

\begin_layout Plain Layout

LDI 2
\end_layout

\begin_layout Plain Layout

EQU
\end_layout

\begin_layout Plain Layout

JMF 3
\end_layout

\begin_layout Plain Layout

LDC '1'
\end_layout

\begin_layout Plain Layout

JMP 4
\end_layout

\begin_layout Plain Layout

LOD 0 6
\end_layout

\begin_layout Plain Layout

LDI 3
\end_layout

\begin_layout Plain Layout

EQU
\end_layout

\begin_layout Plain Layout

JMP 4
\end_layout

\begin_layout Plain Layout

LOD 0 6
\end_layout

\begin_layout Plain Layout

LDI 3
\end_layout

\begin_layout Plain Layout

EQU
\end_layout

\begin_layout Plain Layout

IST
\end_layout

\begin_layout Plain Layout

LOD 0 3
\end_layout

\begin_layout Plain Layout

LDI 1
\end_layout

\begin_layout Plain Layout

IPLUS
\end_layout

\begin_layout Plain Layout

STO 0 3
\end_layout

\begin_layout Plain Layout

JMP -134
\end_layout

\begin_layout Plain Layout

LOD 0 2
\end_layout

\begin_layout Plain Layout

LDI 1
\end_layout

\begin_layout Plain Layout

IPLUS
\end_layout

\begin_layout Plain Layout

STO 0 2
\end_layout

\begin_layout Plain Layout

JMP -147
\end_layout

\begin_layout Plain Layout

LOD 0 7
\end_layout

\begin_layout Plain Layout

RETURN
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\end_body
\end_document
