#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass book
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
label{chp:lex}
\end_layout

\end_inset

Lexical and Syntactical analysis
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
lstset{language=C}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Our compiler is written in the C language.
 It is divided in three main parts that correspond to the three stages of
 compiling, executed in sequential order:
\end_layout

\begin_layout Itemize
The lexical and syntactical analysis of the language, presented in this
 chapter, that together aim at determining whether the given SOL source
 file is well-written or not and to construct a data structure that describes
 the code in a functional manner;
\end_layout

\begin_layout Itemize
The semantical analysis, presented in Chapter 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ref{chp:sem}
\end_layout

\end_inset

, which aims at determining if the written statements (which are correct
 thanks to the previous analyses) make sense (e.g., performing the sum of
 an integer and a string makes no sense, therefore it is not semantically
 correct), relying on the data structure produced by the previous analyses;
\end_layout

\begin_layout Itemize
The code generation, presented in Chapter 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ref{chp:gen}
\end_layout

\end_inset

, which, given that the code is both well-written and semantically correct,
 translates it in a lower-level code, easier to execute directly (and executed
 by the virtual machine, of which we will talk in Part 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ref{prt:vm}
\end_layout

\end_inset

).
 The code is, again, generated starting from the data structure produced
 by the syntactical analysis, not from the 
\begin_inset Quotes eld
\end_inset

raw
\begin_inset Quotes erd
\end_inset

 code.
\end_layout

\begin_layout Standard
Our compiler uses 
\noun on
Lex
\noun default
 and 
\noun on
Yacc
\noun default
 to perform lexical and syntactical analysis, respectively.
 These are two languages specifically designed for this purpose and they
 produce complete analysis programs written in C.
\end_layout

\begin_layout Section
Lexical analyzer
\end_layout

\begin_layout Standard

\noun on
Lex
\noun default
 is used to produce a lexical analyzer in C language.
 After the 
\noun on
Lex
\noun default
 file compilation, we get a C file defining a function called 
\emph on
yylex
\emph default
.
 This function reads from the input file, whose reference is stored in the
 variable 
\emph on
yyin
\emph default
, and returns to the caller the first token found.
 While doing this, it creates a data structure (called 
\emph on
symbol table
\emph default
 and realized through an hash-map) containing all the symbols found in the
 code (that is, string constants and ids); this allows to create a single
 instance for every string given in input and to reduce name-checking from
 a comparison between strings to a comparison between pointers.
 If, during the analysis, an error is encountered (i.e., in the file is present
 something that isn't part of the language, like an id starting with a digit),
 the 
\emph on
yylex 
\emph default
function stops and produces an error by calling the 
\emph on
yyerror
\emph default
 function.
\end_layout

\begin_layout Standard
This function will be called by the syntactical analyzer to check the syntax
 and produce the 
\emph on
syntax tree
\emph default
, of which we talk in the next section.
\end_layout

\begin_layout Standard
The 
\noun on
Lex
\noun default
 file is divided in three parts.
 In the first part of the 
\noun on
Lex
\noun default
 file, the lexical elements (or 
\emph on
lexemes
\emph default
) that need to be defined with a regular expression (such as the id) are
 defined, in the second part these lexemes are associated to a rule which
 defines the behavior of 
\emph on
yylex
\emph default
 when the specific lexeme is found, and the last part contains specific
 C functions used in the 
\noun on
Lex
\noun default
 rules of the second part.
 The lexemes that don't need to be defined in the first part are those whose
 denotation is fixed, such as keywords and operators.
\end_layout

\begin_layout Standard
The definition of lexemes for the SOL language is, for our compiler, the
 one presented in Code 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ref{lst:lex_regexp}
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language={},caption={Lex definition of lexical elements},label
={lst:lex_regexp},language={}]
\end_layout

\begin_layout Plain Layout

alpha           [a-zA-Z]
\end_layout

\begin_layout Plain Layout

digit           [0-9]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

id              {alpha}({alpha}|{digit}|_)*
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

charconst       '([^
\backslash
']|
\backslash

\backslash
.)'
\end_layout

\begin_layout Plain Layout

intconst        {digit}+
\end_layout

\begin_layout Plain Layout

realconst       {digit}+
\backslash
.{digit}+
\end_layout

\begin_layout Plain Layout

boolconst       true|false
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

comment         --.*
\end_layout

\begin_layout Plain Layout

spacing         ([ 
\backslash
t])+
\end_layout

\begin_layout Plain Layout

sugar           [()
\backslash
[
\backslash
]{}.,;]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

%x strconst 
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The rules associated to each lexeme must be in the form presented in Code
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ref{lst:lex_rule}
\end_layout

\end_inset

.
 The value returned by each rule must be an identifier (i.e., the value of
 an enumerator) of the found lexeme.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[caption={Lex rule},label={lst:lex_rule}]
\end_layout

\begin_layout Plain Layout

lexeme	{ /*action when such lexeme is found*/; return lexeme_descriptor;
 }
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For the fixed lexemes (keywords and other simple stuff), the rules are usually
 as simple the ones in in Code 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ref{lst:lex_keyword}
\end_layout

\end_inset

.
 The complex lexemes, however, have a dynamic structure and hence are attached
 a value.
 This value must be elaborated from the raw textual value contained in the
 variable 
\emph on
yytext
\emph default
 and put in a new variable that will be used throughout the compiler.
 The elaboration consists, normally, in the conversion of the value to the
 correct type; for strings and ids the elaboration includes the addition
 of the textual value to the lexical symbol table.
 In our program, the destination variable is 
\emph on
lexval
\emph default
, instance of 
\emph on
Value, 
\emph default
a union that can contain any type of value accepted by SOL (integer, real,
 string,...).
 The rules for the complex lexemes are all presented in Code 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ref{lst:lex_more}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[caption={Lex rule for a keyword},label={lst:lex_keyword},langu
age={}]
\end_layout

\begin_layout Plain Layout

func                   { return( FUNC ); }
\end_layout

\begin_layout Plain Layout

char                   { return( CHAR ); }
\end_layout

\begin_layout Plain Layout

int                    { return( INT ); }
\end_layout

\begin_layout Plain Layout

real                   { return( REAL ); }
\end_layout

\begin_layout Plain Layout

string                 { return( STRING ); } 
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[caption={Lex rules for constants and ids},label={lst:lex_more}
,language={}]
\end_layout

\begin_layout Plain Layout

{intconst}             { lexval.i_val = atoi( yytext );
\end_layout

\begin_layout Plain Layout

                         return( INT_CONST ); }
\end_layout

\begin_layout Plain Layout

"
\backslash
""                   { BEGIN strconst;
\end_layout

\begin_layout Plain Layout

                         strbuf = malloc( sizeof( char ) ); }
\end_layout

\begin_layout Plain Layout

<strconst>([^"
\backslash
n])*    { concatenate_string( &strbuf, yytext ); }
\end_layout

\begin_layout Plain Layout

<strconst>
\backslash
n[ 
\backslash
t]*     ;
\end_layout

\begin_layout Plain Layout

<strconst>
\backslash
"           { lexval.s_val = new_string( strbuf );
\end_layout

\begin_layout Plain Layout

                         BEGIN 0;
\end_layout

\begin_layout Plain Layout

                         return( STR_CONST ); }
\end_layout

\begin_layout Plain Layout

{charconst}            { yytext[ strlen( yytext ) - 1 ] = '
\backslash
0';
\end_layout

\begin_layout Plain Layout

                         lexval.s_val = new_string( yytext + 1 );
\end_layout

\begin_layout Plain Layout

                         return( CHAR_CONST ); }
\end_layout

\begin_layout Plain Layout

{realconst}            { lexval.r_val = atof( yytext );
\end_layout

\begin_layout Plain Layout

                         return( REAL_CONST ); }
\end_layout

\begin_layout Plain Layout

{boolconst}            { lexval.b_val = ( yytext[ 0 ] == 'f'
\end_layout

\begin_layout Plain Layout

                                          ? FALSE
\end_layout

\begin_layout Plain Layout

                                          : TRUE );
\end_layout

\begin_layout Plain Layout

                         return( BOOL_CONST ); }
\end_layout

\begin_layout Plain Layout

{id}                   { lexval.s_val = new_string( yytext );
\end_layout

\begin_layout Plain Layout

                         return( ID ); }
\end_layout

\begin_layout Plain Layout

{sugar}                { return( yytext[ 0 ] ); }
\end_layout

\begin_layout Plain Layout

.
                      { yyerror( STR_ERROR ); } 
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The last line of 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ref{lst:lex_more}
\end_layout

\end_inset

 means that whatever doesn't match the previous rules must result in an
 error (in the regular expressions, 
\begin_inset Quotes eld
\end_inset

.
\begin_inset Quotes erd
\end_inset

 means any character).
 Our 
\noun on
Lex
\noun default
 file contains also, for each rule, some debugging (enabled with an apposite
 flag) code which is not included here for clarity.
\end_layout

\begin_layout Section
Syntactical analyzer
\end_layout

\begin_layout Standard
Similarly to 
\noun on
Lex
\noun default
, 
\noun on
Yacc
\noun default
 is used to produce a syntactical analyzer in C.
 The compilation of the 
\noun on
Yacc
\noun default
 file produces a 
\noun on
C
\noun default
 file containing a function called 
\emph on
yyparse
\emph default
 that, through calls to 
\emph on
yylex
\emph default
, checks syntax's correctness of the file and produces another data structure,
 the 
\emph on
Syntax Tree
\emph default
, if everything is correct.
\end_layout

\begin_layout Standard
The syntax tree is realized using the 
\emph on
Node
\emph default
 structure, presented in Code 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ref{lst:Node}
\end_layout

\end_inset

 along with the union 
\emph on
Value
\emph default
.
 A 
\emph on
Node
\emph default
 contains:
\end_layout

\begin_layout Itemize
The number of the line of code in which the represented syntactical symbol
 appears;
\end_layout

\begin_layout Itemize
A 
\emph on
type
\emph default
, which says what the node represents.
 In particular, the type is represented as an enumerator which values are
 the 
\emph on
terminals
\emph default
 (integer constant, id, etc) and 
\emph on
nonterminals
\emph default
 (mathematical expressions, assignments, etc) allowed in 
\noun on
SOL
\noun default
.
 To simplify the produced syntax tree, the nonterminals are divided in two
 categories: the 
\emph on
qualified 
\emph default
nonterminals, which are aggregates of nonterminals differentiated by mean
 of a qualifier (e.g.
 mathematical expressions are one type of nonterminal and their qualifier
 is the mathematical operator), and the 
\emph on
unqualified
\emph default
 nonterminals, which are those that cannot be aggregated (e.g.
 an if statement).
 To sum up things, the type can either be a terminal, a qualified nonterminal
 or the special value unqualified nonterminal.
 The specific type of unqualified nonterminal represented by the node is
 then contained in the node's value, as does the qualifier for qualified
 nonterminals;
\end_layout

\begin_layout Itemize
A 
\emph on
value
\emph default
, represented through an instance of the union 
\emph on
Value
\emph default
, that can be an elementary value (integer, string..) if the node is a terminal,
 a unique identifier determining the nonterminal type if the node is an
 unqualified nonterminal (the identifiers are represented as possible values
 of the enumerator 
\emph on
NonTerminal
\emph default
) or a unique identifier determining the qualifier to be used if the node
 is a qualified nonterminal (these are represented as possible values of
 the enumerator 
\emph on
Qualifier
\emph default
);
\end_layout

\begin_layout Itemize
A pointer to the 
\emph on
leftmost child
\emph default
;
\end_layout

\begin_layout Itemize
A pointer to the 
\emph on
first right brother.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[caption={The Node structure},label={lst:Node}]
\end_layout

\begin_layout Plain Layout

typedef struct snode
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	int line;
\end_layout

\begin_layout Plain Layout

	Value value;
\end_layout

\begin_layout Plain Layout

	TypeNode type;
\end_layout

\begin_layout Plain Layout

	struct snode* child;
\end_layout

\begin_layout Plain Layout

	struct snode* brother;
\end_layout

\begin_layout Plain Layout

} Node;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

typedef union
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	int i_val;
\end_layout

\begin_layout Plain Layout

	char* s_val;
\end_layout

\begin_layout Plain Layout

	double r_val;
\end_layout

\begin_layout Plain Layout

	Boolean b_val;
\end_layout

\begin_layout Plain Layout

	Qualifier q_val;
\end_layout

\begin_layout Plain Layout

	Nonterminal n_val;
\end_layout

\begin_layout Plain Layout

} Value; 
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The syntactical analyzer (also called 
\emph on
parser
\emph default
) stores as global variable a pointer to the root node of the tree.
 Note that the tree generated is not the 
\emph on
concrete tree
\emph default
 (that is, the tree that would be generated by direct application of the
 BNF definition) but an 
\emph on
abstract tree
\emph default
 that cuts off some nodes without loss of information but with great gain
 in space occupation a visiting time (e.g., the expressions are defined in
 4 levels to maintain the correct precedence when analyzing the code; these
 levels are of no use after the code has been recognized in the correct
 order, therefore in the resulting abstract tree just the most specific
 level is preserved).
\end_layout

\begin_layout Standard
The 
\noun on
Yacc
\noun default
 file is divided in three parts, whose purpose is the same as that of those
 in a 
\noun on
Lex
\noun default
 file.
 Here, in the first part instead of defining the complex lexemes we instruct
 
\noun on
Yacc
\noun default
 about which these lexemes are, by defining all the possible unique identifiers
 returned by the 
\noun on
Lex
\noun default
 rules as 
\emph on
tokens
\emph default
.
 The second part contains 
\emph on
translation rules
\emph default
 for every syntactical element of the language (all those defined in the
 
\emph on
BNF
\emph default
 description, presented in Chapter 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ref{chp:bnf}
\end_layout

\end_inset

), and the third part contains definitions for the C functions used in the
 translation rules.
\end_layout

\begin_layout Standard
A translation rule must create a 
\emph on
Node
\emph default
 and populate it with the appropriate informations.
 The structure of a translation rule is the one presented in Code 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ref{lst:translation_rule}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[caption={Structure of a translation rule},label={lst:translati
on_rule}]
\end_layout

\begin_layout Plain Layout

syntactical_element : /*BNF definition*/ { $$ = /*code to the Node*/ }
\end_layout

\begin_layout Plain Layout

                    | /*alternate definition*/ { $$ = /*alternate code*/
 }
\end_layout

\begin_layout Plain Layout

                    ;
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
At the left of the colon there is the name of the element, at the right
 there is a sequence of definitions, each associated to a code that is executed
 to create the node when that particular definition is found.
 The definitions are separated by a pipe and the rule must terminate with
 a semicolon.
\end_layout

\begin_layout Standard
In the code, the symbol 
\begin_inset Formula $\$\$$
\end_inset

 represents the lefthand-side of the rule, and the elements of a definition
 can be referred to as 
\begin_inset Formula $\$n$
\end_inset

, where 
\begin_inset Formula $n$
\end_inset

 is the position of the element in the definition starting from 1.
\end_layout

\begin_layout Standard
The 
\emph on
yyparse 
\emph default
function generated starting from the 
\noun on
Yacc
\noun default
 file implements a 
\emph on
Bottom-Up Parsing
\emph default
 method.
 In simple terms, the function is composed of two actions working on a stack,
 the action to execute is chosen basing the stack and on the next token.
 The first action, called 
\emph on
shift
\emph default
, consists in pushing on the stack the newly found token; the second action,
 called 
\emph on
reduce
\emph default
, simplifies a part of the stack according to the given BNF rules and executes
 the relative instructions.
\end_layout

\begin_layout Standard
Knowing how the parsing works, we can understand why there must always be
 a 
\begin_inset Quotes eld
\end_inset

root
\begin_inset Quotes erd
\end_inset

 rule that will be matched at the first call of 
\emph on
yyparse 
\emph default
(if the code is correct, obviously) and associates the result of the subsequent
 calls to the global 
\emph on
root
\emph default
 variable, instead of assigning it to 
\begin_inset Formula $\$\$$
\end_inset

, like the other rules.
 In Code 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ref{lst:some_rule}
\end_layout

\end_inset

 we present, as an example, the root translation rule and the translation
 rule for a function declaration.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[caption={Extract of the translation rules for SOL},label={lst:
some_rule}]
\end_layout

\begin_layout Plain Layout

program : func_decl { root = $1; }
\end_layout

\begin_layout Plain Layout

        ;
\end_layout

\begin_layout Plain Layout

func_decl : FUNC ID { $$ = new_terminal_node( T_ID, lexval ); }
\end_layout

\begin_layout Plain Layout

            '(' par_list ')' DEFINE domain type_sect_opt var_sect_opt
\end_layout

\begin_layout Plain Layout

            const_sect_opt func_list_opt func_body
\end_layout

\begin_layout Plain Layout

            {
\end_layout

\begin_layout Plain Layout

                $$ = new_nonterminal_node( N_FUNC_DECL );
\end_layout

\begin_layout Plain Layout

                $$->child = $3;
\end_layout

\begin_layout Plain Layout

                Node** current = &($$->child->brother);
\end_layout

\begin_layout Plain Layout

                current = assign_brother( current, $5 );
\end_layout

\begin_layout Plain Layout

                current = assign_brother( current, $8 );
\end_layout

\begin_layout Plain Layout

                current = assign_brother( current, $9 );
\end_layout

\begin_layout Plain Layout

                current = assign_brother( current, $10 );
\end_layout

\begin_layout Plain Layout

                current = assign_brother( current, $11 );
\end_layout

\begin_layout Plain Layout

                current = assign_brother( current, $12 );
\end_layout

\begin_layout Plain Layout

                current = assign_brother( current, $13 );
\end_layout

\begin_layout Plain Layout

            }
\end_layout

\begin_layout Plain Layout

          ;
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that C code can be inserted in any position between the elements of
 the righthand-side, and it must produce something that will then be referred
 to as $n, just like a normal element.
 In the presented example, we use this method to create a Node containing
 the id of the declared function, and this node is then assigned as leftmost
 child of the node created for the whole rule.
 This is a required practice for ids and other constants since their value
 is readable from 
\emph on
lexval
\emph default
 only after the token has been recognized and it's overwritten when the
 next token is found.
\end_layout

\end_body
\end_document
