#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass book
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
label{chp:tut}
\end_layout

\end_inset

SOL language introduction and examples
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
lstset{language={SOL}}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The project here presented aims at the realization of a full Compiler and
 execution environment for the SOL (Structured Odd Language) programming
 language.
 The execution environment comprises a Virtual Machine which executes the
 intermediate code (namely S-code) produced as result of the compilation.
 Such Virtual Machine embodies an interface that allows the user to load
 a source or compiled SOL file and execute it (eventually after compilation)
 and presents a pleasant and usable graphical environment for the input
 and output of data.
\end_layout

\begin_layout Standard
SOL is a classic procedural programming language.
\end_layout

\begin_layout Standard
In every SOL program there is a main 
\emph on
function 
\emph default
that contains the main code (just like the 
\emph on
main 
\emph default
procedure in C, with the difference that, here, we don't need to call this
 function in a particular way).
 The function is defined in a precise manner, as in Listing 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ref{lst:hello_world}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[caption={Hello world program},label={lst:hello_world}]
\end_layout

\begin_layout Plain Layout

func hello_world(): int
\end_layout

\begin_layout Plain Layout

begin hello_world
\end_layout

\begin_layout Plain Layout

	write "Hello world!";
\end_layout

\begin_layout Plain Layout

	return 0;
\end_layout

\begin_layout Plain Layout

end hello_world 
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this first example we can notice that a function definition is essentially
 divided in two parts: a 
\emph on
header
\emph default
, in which the function's name and its return type are declared, and a 
\emph on
body
\emph default
 in which the function's instructions are written.
\end_layout

\begin_layout Standard
This first example, obviously, does not comprise all the elements allowed
 in a function's header.
 The purpose of the header is to define all the objects of the function's
 local environment, that is, all the objects usable in the function's body.
 These objects fall in five categories, and their definitions must be written
 in the presented order:
\end_layout

\begin_layout Itemize
The function's parameters.
 These are defined in the round brackets after the function's name as a
 list of variable definitions (as can be seen in Listing 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ref{lst:par_eg}
\end_layout

\end_inset

).
 A variable definition must be in the form 
\emph on
variable_name: type; 
\emph default
and any number of variable of the same type can be defined with a single
 instruction by listing all the variables' names before the colon separated
 by commas.
 The types allowed in SOL are the simple types 
\emph on
int, real, bool, string, char
\emph default
 and the two complex ones 
\emph on
vector
\emph default
 and 
\emph on
struct
\emph default
, whose syntax is defined later.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[caption={Parameters},label={lst:par_eg}]
\end_layout

\begin_layout Plain Layout

func program( par1, par2: int; par3: string ): int
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
A list of types.
 The definition of a type has the very same purpose of the instruction 
\emph on
typedef
\emph default
 in C, and any type can be redefined with a custom name, even if this is
 particularly useful only with complex types.
 The syntax of a type definition is very similar to that of a variable definitio
n, as can be seen in Listing 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ref{lst:type_eg}
\end_layout

\end_inset

.
 In the same example we can also see how a complex type is defined.
 A vector must follow the syntax 
\emph on
vector[ size ] of element_type;
\emph default
 while for a struct one must write the keyword 
\emph on
struct 
\emph default
followed by round brackets in which a list of variables is contained.
 The variables in the list are the flieds of the structure.
 The types are completely orthogonal (one can define a vector of structs
 containing vectors, for example).
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[caption={Types},label={lst:type_eg}]
\end_layout

\begin_layout Plain Layout

	type
\end_layout

\begin_layout Plain Layout

		from_slides: vector[ 10 ] of struct( la: int: lala: vector[ 20 ] of vector[
 5 ] of real );
\end_layout

\begin_layout Plain Layout

		T2: string;
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
A list of variables, similar to that in the definition of parameters, as
 in Listing 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ref{lst:var_eg}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[caption={Variables},label={lst:var_eg}]
\end_layout

\begin_layout Plain Layout

	var
\end_layout

\begin_layout Plain Layout

		c: char;
\end_layout

\begin_layout Plain Layout

		i: int;
\end_layout

\begin_layout Plain Layout

		x, y, z: real;
\end_layout

\begin_layout Plain Layout

		s: string;
\end_layout

\begin_layout Plain Layout

		b: bool;
\end_layout

\begin_layout Plain Layout

		r: struct( a: char; b: string; );
\end_layout

\begin_layout Plain Layout

		v: vector [ 5 ] of int;
\end_layout

\begin_layout Plain Layout

		w: vector [ 100 ] of struct( a: int; b: char; );
\end_layout

\begin_layout Plain Layout

		out_x: real;
\end_layout

\begin_layout Plain Layout

		out_v: vector [ 10 ] of real; 
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
A list of constants, whose definition is identical to that of variables
 except for the fact that a value must be assigned to each constant at definitio
n time (see Listing 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ref{lst:const_eg}
\end_layout

\end_inset

.
 Note that an assignment separated by the variable's definition follows
 the same syntax but without the indication of the variable's type (that
 is, something like 
\emph on
variable_name = value;
\emph default
).
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[caption={Constants},label={lst:const_eg}]
\end_layout

\begin_layout Plain Layout

	const
\end_layout

\begin_layout Plain Layout

		MAX: int = 100;
\end_layout

\begin_layout Plain Layout

		name: T2 = "alpha";
\end_layout

\begin_layout Plain Layout

		PAIR: struct( a: int; b: char; ) = struct( 25, 'c' );
\end_layout

\begin_layout Plain Layout

		VECT: vector [ 5 ] of real = vector( 2.0, 3.12, 4.67, 1.1, 23.0 );
\end_layout

\begin_layout Plain Layout

		MAT: vector [ 2 ] of vector [ 5 ] of real = vector( VECT, vector( x, y,
 z, 10.0, x+y+z ) ); 
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
A list of functions, defined exactly as the main one.
 These functions will be visible inside the main function since they are
 part of its environment.
 They can, obviously, contain other functions' definitions, and these are
 also visible by their parent function but not from their brothers and their
 brothers' children.
\end_layout

\begin_layout Standard
These are all the things that a function's header can contain.
 Note that none of this parts is mandatory.
 The only mandatory part is, in fact, the body (which can contain any instructio
n except a definition).
\end_layout

\begin_layout Standard
// TODO add tests
\end_layout

\begin_layout Section
A full sol program
\end_layout

\begin_layout Standard
We decided to implement 
\emph on
Conway's Game of Life 
\emph default
as an example of full program that can run with our SOL compiler and virtual
 machine.
 The program, in particular, allows us to test the I/O interface in an extensive
 manner.
\end_layout

\begin_layout Standard
// TODO GoL
\end_layout

\end_body
\end_document
