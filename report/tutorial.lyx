#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass book
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
label{chp:tut}
\end_layout

\end_inset

SOL language introduction and examples
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{language={SOL}}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The project here presented aims at the realization of a full Compiler and
 execution environment for the SOL programming language.
 The execution environment comprises a Virtual Machine which executes the
 intermediate code (namely S-code) produced as result of the compilation.
 Such Virtual Machine embodies an interface that allows the user to load
 a source or compiled SOL file and execute it (eventually after compilation)
 and presents a pleasant and usable graphical environment for the input
 and output of data.
\end_layout

\begin_layout Standard
SOL (Structured Odd Language) is a classic procedural programming language,
 not different from C.
\end_layout

\begin_layout Standard
In every SOL program there is a main 
\emph on
function 
\emph default
that contains the main code (just like the 
\emph on
main 
\emph default
procedure in C, with the difference that, here, we don't need to call this
 function in a particular way).
 The function is defined in a precise manner, as in Code 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ref{lst:first_example}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[caption={First code example},label={lst:first_example}]
\end_layout

\begin_layout Plain Layout

func function_name( param: int; ): int
\end_layout

\begin_layout Plain Layout

	types
\end_layout

\begin_layout Plain Layout

		T: vector[10] of string;
\end_layout

\begin_layout Plain Layout

	var
\end_layout

\begin_layout Plain Layout

		c: char;
\end_layout

\begin_layout Plain Layout

		i, j: int;
\end_layout

\begin_layout Plain Layout

		x: bool;
\end_layout

\begin_layout Plain Layout

	const
\end_layout

\begin_layout Plain Layout

		name: string = "hello, world!";
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	func sub_function(): int
\end_layout

\begin_layout Plain Layout

		var
\end_layout

\begin_layout Plain Layout

			s: string;
\end_layout

\begin_layout Plain Layout

	begin sub_function
\end_layout

\begin_layout Plain Layout

		return 0;
\end_layout

\begin_layout Plain Layout

	end sub_function
\end_layout

\begin_layout Plain Layout

begin function_name
\end_layout

\begin_layout Plain Layout

	return 0;
\end_layout

\begin_layout Plain Layout

end function_name
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
As we can notice immediately, the function definition is divided in two
 main parts: a 
\emph on
header
\emph default
 in which the local elements (types, variables, constants and functions)
 are defined, and a 
\emph on
body
\emph default
 in which the function performs whatever it should.
\end_layout

\begin_layout Standard
Any function defined in the header of the main function must follow the
 very same structure.
 As we can notice from the above example, however, all the sections in the
 header and the function parameters are facultative.
 The only mandatory part is, in fact, the body.
\end_layout

\begin_layout Standard
// TODO whatelse?
\end_layout

\begin_layout Section
A full sol program
\end_layout

\begin_layout Standard
We decided to implement 
\emph on
Conway's Game of Life 
\emph default
as an example of full program that can run with our SOL compiler and virtual
 machine.
 The program, in particular, allows us to test the I/O interface in an extensive
 manner.
\end_layout

\begin_layout Standard
// TODO GoL
\end_layout

\end_body
\end_document
