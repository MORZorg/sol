#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass book
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
label{chp:tut}
\end_layout

\end_inset

SOL language introduction and examples
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{language={SOL}}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The project here presented aims at the realization of a full Compiler and
 execution environment for the SOL (Structured Odd Language) programming
 language.
 The execution environment comprises a Virtual Machine which executes the
 intermediate code (namely S-code) produced as result of the compilation.
 Such Virtual Machine embodies an interface that allows the user to load
 a source or compiled SOL file and execute it (eventually after compilation)
 and presents a pleasant and usable graphical environment for the input
 and output of data.
\end_layout

\begin_layout Standard
SOL is a classic procedural programming language.
\end_layout

\begin_layout Standard
In every SOL program there is a main 
\emph on
function 
\emph default
that contains the main code (just like the 
\emph on
main 
\emph default
procedure in C, with the difference that, here, we don't need to call this
 function in a particular way).
 The function is defined in a precise manner, as in Listing 

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ref{lst:hello_world}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[caption={Hello world program},label={lst:hello_world}]
\end_layout

\begin_layout Plain Layout

func hello_world(): int
\end_layout

\begin_layout Plain Layout

begin hello_world
\end_layout

\begin_layout Plain Layout

	write "Hello world!";
\end_layout

\begin_layout Plain Layout

	return 0;
\end_layout

\begin_layout Plain Layout

end hello_world 
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

In this first example we can notice that a function definition is essentially
 divided in two parts: a 
\emph on
header
\emph default
, in which the function's name and its return type are declared, and a 
\emph on
body
\emph default
 in which the function's instructions are written.
\end_layout

\begin_layout Standard

This first example, obviously, does not comprise all the elements allowed
 in a function definition.
 We present another one, more complex and more comprehensive
\lang english
, in Listing 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ref{lst:first_example}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[caption={First code example},label={lst:first_example}]
\end_layout

\begin_layout Plain Layout

func function_name( param: int; ): int
\end_layout

\begin_layout Plain Layout

	type
\end_layout

\begin_layout Plain Layout

		T: vector[ 10 ] of string;
\end_layout

\begin_layout Plain Layout

	var
\end_layout

\begin_layout Plain Layout

		c: char;
\end_layout

\begin_layout Plain Layout

		i, j: int;
\end_layout

\begin_layout Plain Layout

		x: bool;
\end_layout

\begin_layout Plain Layout

	const
\end_layout

\begin_layout Plain Layout

		name: string = "hello, world!";
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	func sub_function(): int
\end_layout

\begin_layout Plain Layout

		var
\end_layout

\begin_layout Plain Layout

			s: string;
\end_layout

\begin_layout Plain Layout

	begin sub_function
\end_layout

\begin_layout Plain Layout

		s = name;
\end_layout

\begin_layout Plain Layout

		write s;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		return 0;
\end_layout

\begin_layout Plain Layout

	end sub_function
\end_layout

\begin_layout Plain Layout

begin function_name
\end_layout

\begin_layout Plain Layout

	return 0;
\end_layout

\begin_layout Plain Layout

end function_name
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Now we can have a better clue of what the function's header can contain.
 In particular, it contains the declaration of 
\emph on
types
\emph default
, 
\emph on
variables
\emph default
, 
\emph on
constants 
\emph default
and 
\emph on
functions
\emph default
 in the local environment of the defined function.
 All these parts are facultative, as we can notice both from the example
 in Listing 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ref{lst:hello_world}
\end_layout

\end_inset

 and in the definition of the 
\emph on
sub_function
\emph default
 function.
 The only mandatory part is, in fact, the body.
\end_layout

\begin_layout Standard
// TODO explanation of elementary and complex types sbra pwcock
\end_layout

\begin_layout Standard
// TODO add tests
\end_layout

\begin_layout Section
A full sol program
\end_layout

\begin_layout Standard
We decided to implement 
\emph on
Conway's Game of Life 
\emph default
as an example of full program that can run with our SOL compiler and virtual
 machine.
 The program, in particular, allows us to test the I/O interface in an extensive
 manner.
\end_layout

\begin_layout Standard
// TODO GoL
\end_layout

\end_body
\end_document
