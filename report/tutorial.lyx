#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass book
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
label{chp:tut}
\end_layout

\end_inset

SOL language introduction and examples
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
lstset{language={SOL}}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The project here presented aims at the realization of a full Compiler and
 execution environment for the SOL (Structured Odd Language) programming
 language.
 The execution environment comprises a Virtual Machine which executes the
 intermediate code (namely S-code) produced as result of the compilation.
 Such Virtual Machine embodies an interface that allows the user to load
 a source or compiled SOL file and execute it (eventually after compilation)
 and presents a pleasant and usable graphical environment for the input
 and output of data.
\end_layout

\begin_layout Standard
SOL is a classic procedural programming language.
\end_layout

\begin_layout Standard
In every SOL program there is a main 
\emph on
function 
\emph default
that contains the main code (just like the 
\emph on
main 
\emph default
procedure in C, with the difference that, here, we don't need to call this
 function in a particular way).
 The function is defined in a precise manner, as in Listing 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ref{lst:hello_world}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[caption={Hello world program},label={lst:hello_world}]
\end_layout

\begin_layout Plain Layout

func hello_world(): int
\end_layout

\begin_layout Plain Layout

begin hello_world
\end_layout

\begin_layout Plain Layout

	write "Hello world!";
\end_layout

\begin_layout Plain Layout

	return 0;
\end_layout

\begin_layout Plain Layout

end hello_world 
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this first example we can notice that a function definition is essentially
 divided in two parts: a 
\emph on
header
\emph default
, in which the function's name and its return type are declared, and a 
\emph on
body
\emph default
 in which the function's instructions are written.
\end_layout

\begin_layout Standard
This first example, obviously, does not comprise all the elements allowed
 in a function's header.
 The purpose of the header is to define all the objects of the function's
 local environment, that is, all the objects usable in the function's body.
 These objects fall in five categories, and their definitions must be written
 in the presented order:
\end_layout

\begin_layout Description
The
\begin_inset space ~
\end_inset

function's
\begin_inset space ~
\end_inset

parameters These are defined in the round brackets after the function's
 name as a list of variable definitions (as can be seen in Listing 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ref{lst:par_eg}
\end_layout

\end_inset

).
 A variable definition must be in the form 
\emph on
variable_name: type; 
\emph default
and any number of variable of the same type can be defined with a single
 instruction by listing all the variables' names before the colon separated
 by commas.
 The types allowed in SOL are the simple types 
\emph on
int, real, bool, string, char
\emph default
, the two complex ones 
\emph on
vector
\emph default
 and 
\emph on
struct
\emph default
 (whose syntax is defined later) and all the user-defined types.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[caption={Parameters},label={lst:par_eg}]
\end_layout

\begin_layout Plain Layout

func program( par, par_two: int; par_three: string; ): int
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Description
A
\begin_inset space ~
\end_inset

list
\begin_inset space ~
\end_inset

of
\begin_inset space ~
\end_inset

types The definition of a type has the very same purpose of the instruction
 
\emph on
typedef
\emph default
 in C, and any type can be redefined with a custom name, although this is
 particularly useful only with complex types.
 The syntax of a type definition is very similar to that of a variable definitio
n, as can be seen in Listing 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ref{lst:type_eg}
\end_layout

\end_inset

.
 In the same example we can also see how a complex type is defined.
 A vector must follow the syntax 
\emph on
vector[ size ] of element_type;
\emph default
 while for a struct one must write the keyword 
\emph on
struct 
\emph default
followed by round brackets in which a list of variables is contained.
 The variables in the list are the fields of the structure.
 The types are completely orthogonal (one can define a vector of structs
 containing vectors, for example).
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[caption={Types},label={lst:type_eg}]
\end_layout

\begin_layout Plain Layout

	type
\end_layout

\begin_layout Plain Layout

		from_slides: vector[ 10 ] of
\end_layout

\begin_layout Plain Layout

				struct( la: int: lala: vector[ 20 ] of vector[ 5 ] of real );
\end_layout

\begin_layout Plain Layout

		T2: string;
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Description
A
\begin_inset space ~
\end_inset

list
\begin_inset space ~
\end_inset

of
\begin_inset space ~
\end_inset

variables This is similar to that in the definition of parameters, as in
 Listing 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ref{lst:var_eg}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[caption={Variables},label={lst:var_eg}]
\end_layout

\begin_layout Plain Layout

	var
\end_layout

\begin_layout Plain Layout

		c: char;
\end_layout

\begin_layout Plain Layout

		i: int;
\end_layout

\begin_layout Plain Layout

		x, y, z: real;
\end_layout

\begin_layout Plain Layout

		s: string;
\end_layout

\begin_layout Plain Layout

		b: bool;
\end_layout

\begin_layout Plain Layout

		r: struct( a: char; b: string; );
\end_layout

\begin_layout Plain Layout

		v: vector [ 5 ] of int;
\end_layout

\begin_layout Plain Layout

		w: vector [ 100 ] of struct( a: int; b: char; );
\end_layout

\begin_layout Plain Layout

		out_x: real;
\end_layout

\begin_layout Plain Layout

		out_v: vector [ 10 ] of real; 
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Description
A
\begin_inset space ~
\end_inset

list
\begin_inset space ~
\end_inset

of
\begin_inset space ~
\end_inset

constants The definition of a constant is identical to that of variables
 except for the fact that a value must be assigned to each constant at definitio
n time (see Listing 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ref{lst:const_eg}
\end_layout

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[caption={Constants},label={lst:const_eg}]
\end_layout

\begin_layout Plain Layout

	const
\end_layout

\begin_layout Plain Layout

		MAX: int = 100;
\end_layout

\begin_layout Plain Layout

		name: T = "alpha";
\end_layout

\begin_layout Plain Layout

		PAIR: struct( a: int; b: char; ) = struct( 25, 'c' );
\end_layout

\begin_layout Plain Layout

		VECT: vector [ 5 ] of real = vector( 2.0, 3.12, 4.67, 1.1, 23.0 );
\end_layout

\begin_layout Plain Layout

		MAT: vector [ 2 ] of vector [ 5 ] of real =
\end_layout

\begin_layout Plain Layout

				vector( VECT, vector( x, y, z, 10.0, x+y+z ) ); 
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Description
A
\begin_inset space ~
\end_inset

list
\begin_inset space ~
\end_inset

of
\begin_inset space ~
\end_inset

functions Every function is defined exactly as the main one.
 These functions will be visible inside the main function since they are
 part of its environment.
 They can, obviously, contain other functions' definitions, and these are
 also visible by their parent function but not from their brothers and their
 brothers' children.
\end_layout

\begin_layout Standard
These are all the things that a function's header can contain.
 Note that none of this parts is mandatory.
 The only mandatory part is, in fact, the body (which can contain any instructio
n except a definition).
\end_layout

\begin_layout Standard
The body of a function must always contain a 
\emph on
return
\emph default
 statement in every branch (if the body is branched by a conditional statement
 and a branch contains a 
\emph on
return
\emph default
, then every other branch must terminate with one too).
\end_layout

\begin_layout Section
The body of a function - instructions of SOL
\end_layout

\begin_layout Standard
In this section we present all the instructions allowed in a SOL program
 (except for the definitions, explained before).
 They follow a syntax which is pretty standard, anyway.
\end_layout

\begin_layout Subsection
Access to struct fields and vector values
\end_layout

\begin_layout Standard
Access to a field of a structure is done with a dot, while indexing a vector
 is done by enclosing the index in square brackets.
 Both operations are exemplified in Listing 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ref{lst:ixa_fda}
\end_layout

\end_inset

.
 Note that a double dash starts a comment.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[caption={Examples of indexing and fielding},label={lst:ixa_fda
}]
\end_layout

\begin_layout Plain Layout

s: struct( a: int; b: struct( c: string ) );
\end_layout

\begin_layout Plain Layout

v: vector [ 10 ] of vector [ 5 ] of int;
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

-- Reference to the field a of the structure s
\end_layout

\begin_layout Plain Layout

s.a;
\end_layout

\begin_layout Plain Layout

-- Reference to the field c of the field b of the structure s
\end_layout

\begin_layout Plain Layout

s.b.c;
\end_layout

\begin_layout Plain Layout

-- Indexing of the fourth element of v
\end_layout

\begin_layout Plain Layout

v[3];
\end_layout

\begin_layout Plain Layout

-- Indexing of the second element of the first element of v
\end_layout

\begin_layout Plain Layout

v[0][1];
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Arithmetic expressions
\end_layout

\begin_layout Standard
In SOL, any numerical (integer or real) variable can be involved in an arithmeti
c expression, but the language does not provide implicit type coercion.
 This means that an expression can contain only real or only integer operands,
 but there are two functions that allow to mix things up by providing explicit
 casting.
 These two functions are 
\emph on
toint 
\emph default
and 
\emph on
toreal 
\emph default
(with obvious semantics).
\end_layout

\begin_layout Standard
The operands are the same for real and integer variables and are + (plus),
 - (minus), / (divide) and * (multiply).
 The minus operand can be applied to a single value to obtain its opposite
 (
\begin_inset Formula $-a=-1*a$
\end_inset

 ), otherwise all the operands are binary, left associative, and multiply
 and divide have higher precedence than minus and plus (the unary minus
 has the highest precedence, though).
\end_layout

\begin_layout Standard
The operands in an expression are evaluated from left to right.
\end_layout

\begin_layout Standard
An example of arithmetic expression is presented in Listing 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ref{lst:arith_eg}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[caption={Example of arithmetic expression},label={lst:arith_eg
}]
\end_layout

\begin_layout Plain Layout

i, j: int;
\end_layout

\begin_layout Plain Layout

x, y: real;
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

x = toreal( i + j ) * ( r - toreal( i ) );
\end_layout

\begin_layout Plain Layout

j = toint( x + y - 1.25 );
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this example we can also notice the syntax of an assignment, simply 
\emph on
variable_name = value;
\emph default
.
\end_layout

\begin_layout Subsection
Conditional constructs and logical expressions
\end_layout

\begin_layout Standard
There are two conditional constructs in sol: the conditional 
\emph on
expression 
\emph default
is an expression that assumes different values when different conditions
 apply, while the conditional 
\emph on
statement
\emph default
 is a construct
\emph on
 
\emph default
that allows different lists of statements to be executed when different
 conditions apply.
\end_layout

\begin_layout Standard
The syntax of a conditional expression is presented in Listing 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ref{lst:cond_expr_eg}
\end_layout

\end_inset

, while that of a conditional statement is presented in Listing 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ref{lst:cond_stat_eg}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[caption={Example of conditional expression},label={lst:cond_ex
pr_eg}]
\end_layout

\begin_layout Plain Layout

a, b, c: int;
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

a = if b > c then b + c elsif b == c + 1 then b - c else a + 1 endif;
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[caption={Example of conditional statement},label={lst:cond_sta
t_eg}]
\end_layout

\begin_layout Plain Layout

a, b, c: int;
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

if a == b then
\end_layout

\begin_layout Plain Layout

	b = c;
\end_layout

\begin_layout Plain Layout

elsif a > b then
\end_layout

\begin_layout Plain Layout

	c = b + a;
\end_layout

\begin_layout Plain Layout

else
\end_layout

\begin_layout Plain Layout

	c = b - a;
\end_layout

\begin_layout Plain Layout

endif;
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Both constructs use the same keywords in the same order, in both cases after
 an 
\emph on
if 
\emph default
or an 
\emph on
elsif 
\emph default
there must be a logical expression and both constructs terminate with the
 keyword 
\emph on
endif
\emph default
 followed by a semicolon.
 The main difference is that in a conditional expression what follows a
 
\emph on
then 
\emph default
or an 
\emph on
else 
\emph default
must be an expression returning a single value, while in a conditional construct
 such keywords can be followed by any number of statements.
 Moreover, in a conditional expression the 
\emph on
else
\emph default
 clause is mandatory (to ensure that the expression always assumes a value),
 while in a conditional statement is facultative.
 In both constructs the 
\emph on
elsif
\emph default
 clauses are not mandatory.
\end_layout

\begin_layout Standard
The logical expressions allows the boolean binary operators 
\emph on
and 
\emph default
(conjunction) and 
\emph on
or
\emph default
 (disjunction) and the unary 
\emph on
not
\emph default
 (negation).
 The negation operator has higher precedence than the other two.
\end_layout

\begin_layout Standard
Operands of a logical expression can be relational expressions, that is,
 expressions with arithmetic expressions as operands involving the operators
 == (equality), != (inequality), > (greater than), >= (greater than or equal),
 < (less than), <= (less than or equal), 
\emph on
in 
\emph default
(membership).
 The equality and inequality operators can be applied to any type of operands,
 while the other (except for the membership, which is somewhat special)
 can only be applied to integer, real or string operands.
 Operands must be of the same type.
 In the case of the membership, the second operand must be a vector and
 the first operand must be of the same type of the vector's elements.
\end_layout

\begin_layout Standard
Combining all the types of operators, the precedence goes as in Table 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ref{tbl:op_prec}
\end_layout

\end_inset

 (precedence increases with the number of line).
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="1">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
and, or
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
==, !=, >, >=, <, <=, in
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+, - (binary)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
*, /
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
- (unary), not
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
label{tbl:op_prec}
\end_layout

\end_inset

Precedence of operators
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Cycles
\end_layout

\begin_layout Standard
There are three types of loop constructs in SOL: the 
\emph on
while 
\emph default
(Listing 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ref{lst:while_eg}
\end_layout

\end_inset

), the
\emph on
 for 
\emph default
(Listing 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ref{lst:for_eg}
\end_layout

\end_inset

)
\emph on
 
\emph default
and the 
\emph on
foreach 
\emph default
(Listing 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ref{lst:foreach_eg}
\end_layout

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[caption={Example of while loop},label={lst:while_eg}]
\end_layout

\begin_layout Plain Layout

a, b, c: int;
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

while a >= b do
\end_layout

\begin_layout Plain Layout

	a = a - c;
\end_layout

\begin_layout Plain Layout

endwhile;
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[caption={Example of for loop},label={lst:for_eg}]
\end_layout

\begin_layout Plain Layout

i, k: int;
\end_layout

\begin_layout Plain Layout

v: vector [ 100 ] of int;
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

for i = 1 to 100 do
\end_layout

\begin_layout Plain Layout

	k = k + v[ i ];
\end_layout

\begin_layout Plain Layout

endfor;
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[caption={Example of foreach loop},label={lst:foreach_eg}]
\end_layout

\begin_layout Plain Layout

i, k: int;
\end_layout

\begin_layout Plain Layout

v: vector [ 100 ] of int;
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

foreach i in v do
\end_layout

\begin_layout Plain Layout

	k = k + i;
\end_layout

\begin_layout Plain Layout

endforeach;
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the for loop, the counting variable (i, in the example) cannot be assigned
 within the loop body.
 The semantics of the while and for loops is the classical one, and the
 foreach is, intuitively, a loop in which, at every iteration, the 
\begin_inset Quotes eld
\end_inset

counting
\begin_inset Quotes erd
\end_inset

 (it's not really counting) variable assumes the following value of the
 vector (in the example, v).
 It is a nice method of vector iteration.
\end_layout

\begin_layout Subsection
Input/Output
\end_layout

\begin_layout Standard
SOL feature two instructions to produce output (
\emph on
write 
\emph default
and 
\emph on
wr
\emph default
) and two to request input (
\emph on
read 
\emph default
and 
\emph on
rd
\emph default
).
 The syntax of the four instructions is presented in Listing 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
ref{lst:i_o_eg}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[caption={Examples of I/O instructions},label={lst:i_o_eg}]
\end_layout

\begin_layout Plain Layout

a, b, c: int;
\end_layout

\begin_layout Plain Layout

filename: string;
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

write [ filename ] a;
\end_layout

\begin_layout Plain Layout

b = wr [ filename ] a + c;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

read [ filename ] a;
\end_layout

\begin_layout Plain Layout

b = rd [ filename ] int;
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\emph on
write
\emph default
 and 
\emph on
wr
\emph default
 instructions both require to specify the name of the file on which the
 data has to be written in square brackets (not mandatory, if missing the
 output is presented on the standard output, ie the monitor), followed by
 an expression which result is the data to write.
 The difference is that 
\emph on
wr
\emph default
 also assumes that value and, therefore, it can be used as rhs (right hand
 side) of an assignment.
\end_layout

\begin_layout Standard
The 
\emph on
read 
\emph default
and 
\emph on
rd
\emph default
 instructions are, instead, slightly different from each other.
 Both require to specify the name of the file from which to read in square
 brackets (again, not mandatory), but read then requires the name of the
 variable in which the read data has to be saved, while rd requires the
 type of the data read.
 It then assumes the read value assuming that it is of the specified type.
 (WAT?)
\end_layout

\begin_layout Subsection
Function call
\end_layout

\begin_layout Standard
A function can be called simply by writing its name followed by a list of
 values for the parameters enclosed in round brackets, but it always have
 to be used as an operand of an expression.
\end_layout

\begin_layout Section
A full sol program
\end_layout

\begin_layout Standard
We decided to implement 
\emph on
Conway's Game of Life 
\emph default
as an example of full program that can run with our SOL compiler and virtual
 machine.
 The program, in particular, allows us to test the I/O interface of the
 virtual machine in an extensive manner.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[caption={Game of Life}, label={lst:gol}]
\end_layout

\begin_layout Plain Layout

func game_of_life() : int
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	type
\end_layout

\begin_layout Plain Layout

		lines: vector [ 15 ] of bool;
\end_layout

\begin_layout Plain Layout

		grid: vector [ 15 ] of lines;
\end_layout

\begin_layout Plain Layout

	var 
\end_layout

\begin_layout Plain Layout

		state: struct( generation: int; world: grid; ); 
\end_layout

\begin_layout Plain Layout

		input: struct( filename: string; load: bool; ); 
\end_layout

\begin_layout Plain Layout

		generations: int;
\end_layout

\begin_layout Plain Layout

	const 
\end_layout

\begin_layout Plain Layout

		world_size: int = 15;
\end_layout

\begin_layout Plain Layout

		str_summary: string = "Welcome to ORZ's Conway's Game of Life!"; 
\end_layout

\begin_layout Plain Layout

		str_goodbye: string = "Thanks for playing with ORZ's Conway's Game of
 
\end_layout

\begin_layout Plain Layout

			Life! 
\backslash
n
\backslash
n
\backslash
tBye!";
\end_layout

\begin_layout Plain Layout

		str_saved: string = "Your data has been successfully saved in the
\end_layout

\begin_layout Plain Layout

			following file:"; 
\end_layout

\begin_layout Plain Layout

		enter_filename: string = "Enter the filename of your world and if you'd
 
\end_layout

\begin_layout Plain Layout

			like to load from a saved state.";
\end_layout

\begin_layout Plain Layout

		enter_generations: string = "Enter for how many generations would you
\end_layout

\begin_layout Plain Layout

			like to watch your world go by.";
\end_layout

\begin_layout Plain Layout

		enter_world: string = "Your world doesn't exist yet.
\backslash
nEnter it now.";
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	-- Rules:
\end_layout

\begin_layout Plain Layout

	--	* Any live cell with fewer than two live neighbours dies, as if caused
\end_layout

\begin_layout Plain Layout

	--		by under-population.
\end_layout

\begin_layout Plain Layout

	--	* Any live cell with two or three live neighbours lives on to the next
\end_layout

\begin_layout Plain Layout

	--		generation.
\end_layout

\begin_layout Plain Layout

	--	* Any live cell with more than three live neighbours dies, as if by
\end_layout

\begin_layout Plain Layout

	--		overcrowding.
\end_layout

\begin_layout Plain Layout

	--	* Any dead cell with exactly three live neighbours becomes a live
\end_layout

\begin_layout Plain Layout

	--		cell, as if by reproduction.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	func next_state( current_state: grid; ) : grid
\end_layout

\begin_layout Plain Layout

		var
\end_layout

\begin_layout Plain Layout

			i, j, k, h: int;
\end_layout

\begin_layout Plain Layout

			neighbours: int;
\end_layout

\begin_layout Plain Layout

			state: grid;
\end_layout

\begin_layout Plain Layout

		const
\end_layout

\begin_layout Plain Layout

			neighbour_offset: vector[ 3 ] of int = vector( -1, 0, 1 );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	begin next_state
\end_layout

\begin_layout Plain Layout

		for i = 0 to world_size-1 do
\end_layout

\begin_layout Plain Layout

			for j = 0 to world_size-1 do
\end_layout

\begin_layout Plain Layout

				neighbours = 0;
\end_layout

\begin_layout Plain Layout

				foreach k in neighbour_offset do
\end_layout

\begin_layout Plain Layout

					foreach h in neighbour_offset do
\end_layout

\begin_layout Plain Layout

						if k != 0 or h != 0 then
\end_layout

\begin_layout Plain Layout

							if i+k >= 0 and i+k < world_size and
\end_layout

\begin_layout Plain Layout

							   j+h >= 0 and j+h < world_size then
\end_layout

\begin_layout Plain Layout

								if current_state[ i + k ][ j + h ] then
\end_layout

\begin_layout Plain Layout

									neighbours = neighbours + 1;
\end_layout

\begin_layout Plain Layout

								endif;
\end_layout

\begin_layout Plain Layout

							endif;
\end_layout

\begin_layout Plain Layout

						endif;
\end_layout

\begin_layout Plain Layout

					endforeach;
\end_layout

\begin_layout Plain Layout

				endforeach;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

				state[ i ][ j ] = if current_state[ i ][ j ]
\end_layout

\begin_layout Plain Layout

														then neighbours == 2 or neighbours == 3
\end_layout

\begin_layout Plain Layout

														else neighbours == 3 endif;
\end_layout

\begin_layout Plain Layout

			endfor;
\end_layout

\begin_layout Plain Layout

		endfor;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		return state;
\end_layout

\begin_layout Plain Layout

	end next_state
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

begin game_of_life
\end_layout

\begin_layout Plain Layout

	write str_summary;
\end_layout

\begin_layout Plain Layout

	write enter_filename;
\end_layout

\begin_layout Plain Layout

	read input;
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	if input.load then
\end_layout

\begin_layout Plain Layout

		read [ input.filename ] state;
\end_layout

\begin_layout Plain Layout

	else
\end_layout

\begin_layout Plain Layout

		write enter_world;
\end_layout

\begin_layout Plain Layout

		state.world = rd grid;
\end_layout

\begin_layout Plain Layout

	endif;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	write enter_generations;
\end_layout

\begin_layout Plain Layout

	read generations;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	for generations = 0 to generations-1 do
\end_layout

\begin_layout Plain Layout

		state.world = next_state( state.world );
\end_layout

\begin_layout Plain Layout

		state.generation = state.generation + 1;
\end_layout

\begin_layout Plain Layout

		write state;
\end_layout

\begin_layout Plain Layout

	endfor;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	write [ input.filename ] state;
\end_layout

\begin_layout Plain Layout

	write struct( str_goodbye, struct( str_saved, input.filename ) );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	return 0;
\end_layout

\begin_layout Plain Layout

end game_of_life
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\end_body
\end_document
